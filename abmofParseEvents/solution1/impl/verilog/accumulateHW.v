// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accumulateHW (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        pol,
        glPLActiveSliceIdx_V,
        glPLSlices_V_address0,
        glPLSlices_V_ce0,
        glPLSlices_V_we0,
        glPLSlices_V_d0,
        glPLSlices_V_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x;
input  [15:0] y;
input   pol;
input  [1:0] glPLActiveSliceIdx_V;
output  [9:0] glPLSlices_V_address0;
output   glPLSlices_V_ce0;
output   glPLSlices_V_we0;
output  [719:0] glPLSlices_V_d0;
input  [719:0] glPLSlices_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] glPLSlices_V_address0;
reg glPLSlices_V_ce0;
reg glPLSlices_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] pol_read_read_fu_56_p2;
reg   [9:0] glPLSlices_V_addr_reg_299;
wire   [14:0] tmp_36_fu_178_p1;
reg   [14:0] tmp_36_reg_304;
reg   [719:0] tmpData_V_1_reg_309;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_s_fu_182_p3;
reg   [16:0] tmp_s_reg_315;
wire   [2:0] yIndex_2_fu_195_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] p_Result_s_fu_229_p4;
wire   [0:0] exitcond3_fu_189_p2;
wire   [3:0] tmpTmpData_V_fu_239_p2;
reg   [3:0] tmpTmpData_V_reg_334;
wire   [2:0] yIndex_3_fu_251_p2;
wire    ap_CS_fsm_state4;
reg   [719:0] p_Result_2_fu_285_p4;
wire   [0:0] exitcond_fu_245_p2;
reg   [3:0] p_Val2_4_reg_86;
reg   [2:0] yIndex_reg_97;
reg   [719:0] p_Val2_6_reg_108;
reg   [2:0] yIndex1_reg_118;
wire  signed [63:0] tmp_41_cast_fu_173_p1;
wire   [9:0] tmp_32_fu_137_p3;
wire   [5:0] tmp_33_fu_149_p3;
wire   [10:0] p_shl_cast_fu_145_p1;
wire   [10:0] p_shl1_cast_fu_157_p1;
wire   [10:0] tmp_fu_129_p1;
wire   [10:0] tmp_34_fu_161_p2;
wire   [10:0] tmp_35_fu_167_p2;
wire   [16:0] index_assign_cast_fu_205_p1;
wire   [16:0] bvh_d_index_2_fu_209_p2;
wire   [31:0] index_assign_2_cast_fu_214_p1;
wire   [0:0] p_Repl2_s_fu_218_p3;
wire   [31:0] bvh_d_index_fu_201_p1;
wire   [63:0] val_assign_cast_fu_225_p1;
wire   [16:0] index_assign_4_cast_fu_261_p1;
wire   [16:0] bvh_d_index_3_fu_265_p2;
wire   [31:0] bvh_d_index_4_fu_257_p1;
wire   [0:0] tmp_39_fu_274_p3;
wire   [31:0] index_assign_3_cast_fu_270_p1;
wire   [63:0] p_Repl2_2_fu_281_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_245_p2 == 1'd0) & (pol_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_6_reg_108 <= p_Result_2_fu_285_p4;
    end else if (((exitcond3_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_6_reg_108 <= tmpData_V_1_reg_309;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_245_p2 == 1'd0) & (pol_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        yIndex1_reg_118 <= yIndex_3_fu_251_p2;
    end else if (((exitcond3_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        yIndex1_reg_118 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        yIndex_reg_97 <= yIndex_2_fu_195_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        yIndex_reg_97 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (pol_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        glPLSlices_V_addr_reg_299 <= tmp_41_cast_fu_173_p1;
        tmp_36_reg_304 <= tmp_36_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_4_reg_86 <= p_Result_s_fu_229_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmpData_V_1_reg_309 <= glPLSlices_V_q0;
        tmp_s_reg_315[16 : 2] <= tmp_s_fu_182_p3[16 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmpTmpData_V_reg_334 <= tmpTmpData_V_fu_239_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ((exitcond_fu_245_p2 == 1'd1) | (pol_read_read_fu_56_p2 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((exitcond_fu_245_p2 == 1'd1) | (pol_read_read_fu_56_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        glPLSlices_V_address0 = glPLSlices_V_addr_reg_299;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        glPLSlices_V_address0 = tmp_41_cast_fu_173_p1;
    end else begin
        glPLSlices_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        glPLSlices_V_ce0 = 1'b1;
    end else begin
        glPLSlices_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_245_p2 == 1'd1) & (pol_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        glPLSlices_V_we0 = 1'b1;
    end else begin
        glPLSlices_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (pol_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((ap_start == 1'b1) & (pol_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((exitcond_fu_245_p2 == 1'd1) | (pol_read_read_fu_56_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign bvh_d_index_2_fu_209_p2 = (index_assign_cast_fu_205_p1 + tmp_s_reg_315);

assign bvh_d_index_3_fu_265_p2 = (index_assign_4_cast_fu_261_p1 + tmp_s_reg_315);

assign bvh_d_index_4_fu_257_p1 = yIndex1_reg_118;

assign bvh_d_index_fu_201_p1 = yIndex_reg_97;

assign exitcond3_fu_189_p2 = ((yIndex_reg_97 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_245_p2 = ((yIndex1_reg_118 == 3'd4) ? 1'b1 : 1'b0);

assign glPLSlices_V_d0 = p_Val2_6_reg_108;

assign index_assign_2_cast_fu_214_p1 = bvh_d_index_2_fu_209_p2;

assign index_assign_3_cast_fu_270_p1 = bvh_d_index_3_fu_265_p2;

assign index_assign_4_cast_fu_261_p1 = yIndex1_reg_118;

assign index_assign_cast_fu_205_p1 = yIndex_reg_97;

assign p_Repl2_2_fu_281_p1 = tmp_39_fu_274_p3;

assign p_Repl2_s_fu_218_p3 = tmpData_V_1_reg_309[index_assign_2_cast_fu_214_p1];

always @ (*) begin
    p_Result_2_fu_285_p4 = p_Val2_6_reg_108;
    p_Result_2_fu_285_p4[index_assign_3_cast_fu_270_p1] = |(p_Repl2_2_fu_281_p1);
end

always @ (*) begin
    p_Result_s_fu_229_p4 = p_Val2_4_reg_86;
    p_Result_s_fu_229_p4[bvh_d_index_fu_201_p1] = |(val_assign_cast_fu_225_p1);
end

assign p_shl1_cast_fu_157_p1 = tmp_33_fu_149_p3;

assign p_shl_cast_fu_145_p1 = tmp_32_fu_137_p3;

assign pol_read_read_fu_56_p2 = pol;

assign tmpTmpData_V_fu_239_p2 = (p_Val2_4_reg_86 + 4'd1);

assign tmp_32_fu_137_p3 = {{glPLActiveSliceIdx_V}, {8'd0}};

assign tmp_33_fu_149_p3 = {{glPLActiveSliceIdx_V}, {4'd0}};

assign tmp_34_fu_161_p2 = (p_shl_cast_fu_145_p1 - p_shl1_cast_fu_157_p1);

assign tmp_35_fu_167_p2 = (tmp_fu_129_p1 + tmp_34_fu_161_p2);

assign tmp_36_fu_178_p1 = y[14:0];

assign tmp_39_fu_274_p3 = tmpTmpData_V_reg_334[bvh_d_index_4_fu_257_p1];

assign tmp_41_cast_fu_173_p1 = $signed(tmp_35_fu_167_p2);

assign tmp_fu_129_p1 = x[10:0];

assign tmp_s_fu_182_p3 = {{tmp_36_reg_304}, {2'd0}};

assign val_assign_cast_fu_225_p1 = p_Repl2_s_fu_218_p3;

assign yIndex_2_fu_195_p2 = (yIndex_reg_97 + 3'd1);

assign yIndex_3_fu_251_p2 = (yIndex1_reg_118 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_s_reg_315[1:0] <= 2'b00;
end

endmodule //accumulateHW

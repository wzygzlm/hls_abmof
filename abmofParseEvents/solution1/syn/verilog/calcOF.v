// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calcOF (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        glPLTminus1SliceIdx_s,
        glPLTminus2SliceIdx_s,
        glPLSlices_V_address0,
        glPLSlices_V_ce0,
        glPLSlices_V_q0,
        glPLSlices_V_address1,
        glPLSlices_V_ce1,
        glPLSlices_V_q1,
        refBlock_V_address0,
        refBlock_V_ce0,
        refBlock_V_we0,
        refBlock_V_d0,
        targetBlocks_V_address0,
        targetBlocks_V_ce0,
        targetBlocks_V_we0,
        targetBlocks_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x;
input  [15:0] y;
input  [1:0] glPLTminus1SliceIdx_s;
input  [1:0] glPLTminus2SliceIdx_s;
output  [9:0] glPLSlices_V_address0;
output   glPLSlices_V_ce0;
input  [719:0] glPLSlices_V_q0;
output  [9:0] glPLSlices_V_address1;
output   glPLSlices_V_ce1;
input  [719:0] glPLSlices_V_q1;
output  [9:0] refBlock_V_address0;
output   refBlock_V_ce0;
output   refBlock_V_we0;
output  [3:0] refBlock_V_d0;
output  [9:0] targetBlocks_V_address0;
output   targetBlocks_V_ce0;
output   targetBlocks_V_we0;
output  [3:0] targetBlocks_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg glPLSlices_V_ce0;
reg glPLSlices_V_ce1;
reg refBlock_V_ce0;
reg refBlock_V_we0;
reg targetBlocks_V_ce0;
reg targetBlocks_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] tmp_s_fu_195_p3;
reg   [16:0] tmp_s_reg_448;
wire   [10:0] tmp_21_fu_231_p2;
reg   [10:0] tmp_21_reg_453;
wire   [10:0] tmp_25_fu_265_p2;
reg   [10:0] tmp_25_reg_458;
wire   [9:0] next_mul_fu_271_p2;
reg   [9:0] next_mul_reg_463;
wire    ap_CS_fsm_state2;
wire   [4:0] k_1_fu_283_p2;
reg   [4:0] k_1_reg_471;
wire   [0:0] exitcond1_fu_277_p2;
reg   [719:0] tmp1_V_reg_486;
wire    ap_CS_fsm_state3;
reg   [719:0] tmp2_V_reg_491;
wire   [4:0] l_1_fu_328_p2;
reg   [4:0] l_1_reg_499;
wire    ap_CS_fsm_state4;
wire   [2:0] yIndex_1_fu_340_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] k_reg_137;
wire   [0:0] exitcond2_fu_322_p2;
reg   [9:0] phi_mul_reg_148;
reg   [4:0] l_reg_160;
wire   [0:0] exitcond_fu_334_p2;
reg   [2:0] yIndex_reg_172;
wire  signed [63:0] tmp_34_cast_fu_307_p1;
wire  signed [63:0] tmp_35_cast_fu_317_p1;
wire   [63:0] tmp_37_cast_fu_425_p1;
reg   [3:0] p_Val2_s_fu_70;
reg   [3:0] p_Result_1_fu_395_p4;
reg   [3:0] p_Val2_1_fu_74;
reg   [3:0] p_Result_s_fu_374_p4;
wire   [14:0] tmp_fu_191_p1;
wire   [9:0] tmp_19_fu_207_p3;
wire   [5:0] tmp_20_fu_219_p3;
wire   [10:0] p_shl2_cast_fu_215_p1;
wire   [10:0] p_shl3_cast_fu_227_p1;
wire   [9:0] tmp_23_fu_241_p3;
wire   [5:0] tmp_24_fu_253_p3;
wire   [10:0] p_shl_cast_fu_249_p1;
wire   [10:0] p_shl1_cast_fu_261_p1;
wire   [10:0] tmp_27_fu_293_p1;
wire   [10:0] tmp_26_fu_289_p1;
wire   [10:0] tmp_28_fu_296_p2;
wire   [10:0] tmp_29_fu_302_p2;
wire   [10:0] tmp_30_fu_312_p2;
wire   [16:0] index_assign_cast_fu_350_p1;
wire   [16:0] bvh_d_index_1_fu_354_p2;
wire   [31:0] index_assign_1_cast_fu_359_p1;
wire   [0:0] p_Repl2_s_fu_363_p3;
wire   [31:0] bvh_d_index_fu_346_p1;
wire   [63:0] val_assign_cast_fu_370_p1;
wire   [0:0] p_Repl2_1_fu_384_p3;
wire   [63:0] val_assign_1_cast_fu_391_p1;
wire   [9:0] tmp_23_cast_fu_415_p1;
wire   [9:0] tmp_31_fu_419_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_322_p2 == 1'd1))) begin
        k_reg_137 <= k_1_reg_471;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_137 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_334_p2 == 1'd1))) begin
        l_reg_160 <= l_1_reg_499;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        l_reg_160 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_322_p2 == 1'd1))) begin
        phi_mul_reg_148 <= next_mul_reg_463;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_148 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        yIndex_reg_172 <= yIndex_1_fu_340_p2;
    end else if (((exitcond2_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        yIndex_reg_172 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_1_reg_471 <= k_1_fu_283_p2;
        next_mul_reg_463 <= next_mul_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l_1_reg_499 <= l_1_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_1_fu_74 <= p_Result_s_fu_374_p4;
        p_Val2_s_fu_70 <= p_Result_1_fu_395_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp1_V_reg_486 <= glPLSlices_V_q0;
        tmp2_V_reg_491 <= glPLSlices_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_21_reg_453[10 : 4] <= tmp_21_fu_231_p2[10 : 4];
        tmp_25_reg_458[10 : 4] <= tmp_25_fu_265_p2[10 : 4];
        tmp_s_reg_448[16 : 2] <= tmp_s_fu_195_p3[16 : 2];
    end
end

always @ (*) begin
    if ((((exitcond1_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        glPLSlices_V_ce0 = 1'b1;
    end else begin
        glPLSlices_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        glPLSlices_V_ce1 = 1'b1;
    end else begin
        glPLSlices_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        refBlock_V_ce0 = 1'b1;
    end else begin
        refBlock_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_334_p2 == 1'd1))) begin
        refBlock_V_we0 = 1'b1;
    end else begin
        refBlock_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        targetBlocks_V_ce0 = 1'b1;
    end else begin
        targetBlocks_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_334_p2 == 1'd1))) begin
        targetBlocks_V_we0 = 1'b1;
    end else begin
        targetBlocks_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_322_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bvh_d_index_1_fu_354_p2 = (index_assign_cast_fu_350_p1 + tmp_s_reg_448);

assign bvh_d_index_fu_346_p1 = yIndex_reg_172;

assign exitcond1_fu_277_p2 = ((k_reg_137 == 5'd23) ? 1'b1 : 1'b0);

assign exitcond2_fu_322_p2 = ((l_reg_160 == 5'd23) ? 1'b1 : 1'b0);

assign exitcond_fu_334_p2 = ((yIndex_reg_172 == 3'd4) ? 1'b1 : 1'b0);

assign glPLSlices_V_address0 = tmp_34_cast_fu_307_p1;

assign glPLSlices_V_address1 = tmp_35_cast_fu_317_p1;

assign index_assign_1_cast_fu_359_p1 = bvh_d_index_1_fu_354_p2;

assign index_assign_cast_fu_350_p1 = yIndex_reg_172;

assign k_1_fu_283_p2 = (k_reg_137 + 5'd1);

assign l_1_fu_328_p2 = (l_reg_160 + 5'd1);

assign next_mul_fu_271_p2 = (phi_mul_reg_148 + 10'd23);

assign p_Repl2_1_fu_384_p3 = tmp2_V_reg_491[index_assign_1_cast_fu_359_p1];

assign p_Repl2_s_fu_363_p3 = tmp1_V_reg_486[index_assign_1_cast_fu_359_p1];

always @ (*) begin
    p_Result_1_fu_395_p4 = p_Val2_s_fu_70;
    p_Result_1_fu_395_p4[bvh_d_index_fu_346_p1] = |(val_assign_1_cast_fu_391_p1);
end

always @ (*) begin
    p_Result_s_fu_374_p4 = p_Val2_1_fu_74;
    p_Result_s_fu_374_p4[bvh_d_index_fu_346_p1] = |(val_assign_cast_fu_370_p1);
end

assign p_shl1_cast_fu_261_p1 = tmp_24_fu_253_p3;

assign p_shl2_cast_fu_215_p1 = tmp_19_fu_207_p3;

assign p_shl3_cast_fu_227_p1 = tmp_20_fu_219_p3;

assign p_shl_cast_fu_249_p1 = tmp_23_fu_241_p3;

assign refBlock_V_address0 = tmp_37_cast_fu_425_p1;

assign refBlock_V_d0 = p_Val2_1_fu_74;

assign targetBlocks_V_address0 = tmp_37_cast_fu_425_p1;

assign targetBlocks_V_d0 = p_Val2_s_fu_70;

assign tmp_19_fu_207_p3 = {{glPLTminus1SliceIdx_s}, {8'd0}};

assign tmp_20_fu_219_p3 = {{glPLTminus1SliceIdx_s}, {4'd0}};

assign tmp_21_fu_231_p2 = (p_shl2_cast_fu_215_p1 - p_shl3_cast_fu_227_p1);

assign tmp_23_cast_fu_415_p1 = l_reg_160;

assign tmp_23_fu_241_p3 = {{glPLTminus2SliceIdx_s}, {8'd0}};

assign tmp_24_fu_253_p3 = {{glPLTminus2SliceIdx_s}, {4'd0}};

assign tmp_25_fu_265_p2 = (p_shl_cast_fu_249_p1 - p_shl1_cast_fu_261_p1);

assign tmp_26_fu_289_p1 = k_reg_137;

assign tmp_27_fu_293_p1 = x[10:0];

assign tmp_28_fu_296_p2 = (tmp_27_fu_293_p1 + tmp_26_fu_289_p1);

assign tmp_29_fu_302_p2 = (tmp_21_reg_453 + tmp_28_fu_296_p2);

assign tmp_30_fu_312_p2 = (tmp_25_reg_458 + tmp_28_fu_296_p2);

assign tmp_31_fu_419_p2 = (phi_mul_reg_148 + tmp_23_cast_fu_415_p1);

assign tmp_34_cast_fu_307_p1 = $signed(tmp_29_fu_302_p2);

assign tmp_35_cast_fu_317_p1 = $signed(tmp_30_fu_312_p2);

assign tmp_37_cast_fu_425_p1 = tmp_31_fu_419_p2;

assign tmp_fu_191_p1 = y[14:0];

assign tmp_s_fu_195_p3 = {{tmp_fu_191_p1}, {2'd0}};

assign val_assign_1_cast_fu_391_p1 = p_Repl2_1_fu_384_p3;

assign val_assign_cast_fu_370_p1 = p_Repl2_s_fu_363_p3;

assign yIndex_1_fu_340_p2 = (yIndex_reg_172 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_s_reg_448[1:0] <= 2'b00;
    tmp_21_reg_453[3:0] <= 4'b0000;
    tmp_25_reg_458[3:0] <= 4'b0000;
end

endmodule //calcOF

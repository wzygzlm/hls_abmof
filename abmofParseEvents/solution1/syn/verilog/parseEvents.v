// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="parseEvents,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007sclg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.755750,HLS_SYN_LAT=16285003,HLS_SYN_TPT=none,HLS_SYN_MEM=42,HLS_SYN_DSP=0,HLS_SYN_FF=3249,HLS_SYN_LUT=1050}" *)

module parseEvents (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_dout,
        data_empty_n,
        data_read,
        eventsArraySize,
        eventSlice_din,
        eventSlice_full_n,
        eventSlice_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data_dout;
input   data_empty_n;
output   data_read;
input  [31:0] eventsArraySize;
output  [31:0] eventSlice_din;
input   eventSlice_full_n;
output   eventSlice_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_read;
reg eventSlice_write;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] glPLActiveSliceIdx_V;
reg   [1:0] glPLTminus1SliceIdx_s;
reg   [1:0] glPLTminus2SliceIdx_s;
reg   [9:0] glPLSlices_V_address0;
reg    glPLSlices_V_ce0;
reg    glPLSlices_V_we0;
wire   [719:0] glPLSlices_V_q0;
reg    glPLSlices_V_ce1;
wire   [719:0] glPLSlices_V_q1;
reg   [9:0] refBlock_V_address0;
reg    refBlock_V_ce0;
reg    refBlock_V_we0;
wire   [3:0] refBlock_V_q0;
reg   [9:0] targetBlocks_V_address0;
reg    targetBlocks_V_ce0;
reg    targetBlocks_V_we0;
wire   [3:0] targetBlocks_V_q0;
reg   [15:0] sum;
reg   [15:0] glCnt;
reg    data_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_6_fu_294_p2;
reg    eventSlice_blk_n;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_5_fu_289_p2;
reg   [31:0] tmp_5_reg_539;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_11_fu_323_p2;
reg   [10:0] tmp_11_reg_547;
reg    ap_block_state4;
wire   [15:0] x_fu_339_p1;
reg   [15:0] x_reg_552;
wire   [14:0] y_fu_344_p4;
reg   [14:0] y_reg_559;
wire   [15:0] y_cast_fu_354_p1;
reg   [15:0] y_cast_reg_564;
wire   [0:0] tmp_18_fu_359_p3;
reg   [0:0] tmp_18_reg_570;
wire   [0:0] pol_fu_375_p2;
reg   [0:0] pol_reg_575;
wire   [0:0] tmp_10_fu_382_p2;
reg   [0:0] tmp_10_reg_580;
wire   [31:0] i_1_fu_388_p2;
reg   [31:0] i_1_reg_585;
wire   [23:0] tmp1_fu_415_p2;
reg   [23:0] tmp1_reg_590;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
reg   [3:0] refBlock_V_load_reg_605;
wire    ap_CS_fsm_state9;
reg   [3:0] targetBlocks_V_load_reg_610;
wire   [4:0] tmp3_fu_434_p2;
reg   [4:0] tmp3_reg_615;
wire    grp_accumulateHW_fu_186_ap_start;
wire    grp_accumulateHW_fu_186_ap_done;
wire    grp_accumulateHW_fu_186_ap_idle;
wire    grp_accumulateHW_fu_186_ap_ready;
wire    grp_accumulateHW_fu_186_pol;
wire   [9:0] grp_accumulateHW_fu_186_glPLSlices_V_address0;
wire    grp_accumulateHW_fu_186_glPLSlices_V_ce0;
wire    grp_accumulateHW_fu_186_glPLSlices_V_we0;
wire   [719:0] grp_accumulateHW_fu_186_glPLSlices_V_d0;
wire    grp_calcOF_fu_197_ap_start;
wire    grp_calcOF_fu_197_ap_done;
wire    grp_calcOF_fu_197_ap_idle;
wire    grp_calcOF_fu_197_ap_ready;
wire   [9:0] grp_calcOF_fu_197_glPLSlices_V_address0;
wire    grp_calcOF_fu_197_glPLSlices_V_ce0;
wire   [9:0] grp_calcOF_fu_197_glPLSlices_V_address1;
wire    grp_calcOF_fu_197_glPLSlices_V_ce1;
wire   [9:0] grp_calcOF_fu_197_refBlock_V_address0;
wire    grp_calcOF_fu_197_refBlock_V_ce0;
wire    grp_calcOF_fu_197_refBlock_V_we0;
wire   [3:0] grp_calcOF_fu_197_refBlock_V_d0;
wire   [9:0] grp_calcOF_fu_197_targetBlocks_V_address0;
wire    grp_calcOF_fu_197_targetBlocks_V_ce0;
wire    grp_calcOF_fu_197_targetBlocks_V_we0;
wire   [3:0] grp_calcOF_fu_197_targetBlocks_V_d0;
reg   [1:0] tmp_1_reg_151;
wire   [0:0] tmp_fu_217_p2;
reg   [1:0] tmp_3_reg_163;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_2_fu_241_p2;
reg   [31:0] i_reg_175;
reg    grp_accumulateHW_fu_186_ap_start_reg;
reg    ap_block_state4_ignore_call19;
wire    ap_CS_fsm_state5;
reg    grp_calcOF_fu_197_ap_start_reg;
wire    ap_CS_fsm_state7;
wire  signed [63:0] tmp_21_cast_fu_421_p1;
wire   [0:0] tmp_4_fu_265_p2;
wire   [15:0] tmp_17_fu_508_p2;
wire   [5:0] tmp_7_fu_299_p1;
wire   [7:0] tmp_9_fu_311_p1;
wire   [10:0] p_shl_cast_fu_303_p3;
wire   [10:0] p_shl1_cast_fu_315_p3;
wire   [14:0] tmp_15_fu_329_p4;
wire   [1:0] tmp_s_fu_367_p3;
wire   [22:0] tmp_12_fu_394_p3;
wire   [16:0] tmp_13_fu_405_p3;
wire   [23:0] tmp_15_cast_cast_fu_401_p1;
wire   [23:0] tmp_14_cast_fu_411_p1;
wire  signed [4:0] tmp_18_cast_fu_426_p1;
wire  signed [4:0] tmp_19_cast_fu_430_p1;
wire  signed [16:0] lhs_V_fu_444_p1;
wire  signed [16:0] rhs_V_fu_448_p1;
wire   [16:0] r_V_fu_451_p2;
wire  signed [16:0] rhs_V_1_cast_fu_457_p1;
wire   [16:0] r_V_1_fu_460_p2;
wire  signed [16:0] tmp3_cast_fu_473_p1;
wire   [16:0] tmp2_fu_476_p2;
wire  signed [24:0] tmp2_cast_cast_fu_482_p1;
wire   [24:0] tmp1_cast_fu_470_p1;
wire  signed [24:0] tmp_11_cast_fu_466_p1;
wire   [24:0] tmp_16_fu_486_p2;
wire   [24:0] storemerge_fu_492_p3;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 glPLActiveSliceIdx_V = 2'd0;
#0 glPLTminus1SliceIdx_s = 2'd0;
#0 glPLTminus2SliceIdx_s = 2'd0;
#0 sum = 16'd0;
#0 glCnt = 16'd0;
#0 grp_accumulateHW_fu_186_ap_start_reg = 1'b0;
#0 grp_calcOF_fu_197_ap_start_reg = 1'b0;
end

parseEvents_glPLSbkb #(
    .DataWidth( 720 ),
    .AddressRange( 720 ),
    .AddressWidth( 10 ))
glPLSlices_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(glPLSlices_V_address0),
    .ce0(glPLSlices_V_ce0),
    .we0(glPLSlices_V_we0),
    .d0(grp_accumulateHW_fu_186_glPLSlices_V_d0),
    .q0(glPLSlices_V_q0),
    .address1(grp_calcOF_fu_197_glPLSlices_V_address1),
    .ce1(glPLSlices_V_ce1),
    .q1(glPLSlices_V_q1)
);

parseEvents_refBlcud #(
    .DataWidth( 4 ),
    .AddressRange( 529 ),
    .AddressWidth( 10 ))
refBlock_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(refBlock_V_address0),
    .ce0(refBlock_V_ce0),
    .we0(refBlock_V_we0),
    .d0(grp_calcOF_fu_197_refBlock_V_d0),
    .q0(refBlock_V_q0)
);

parseEvents_refBlcud #(
    .DataWidth( 4 ),
    .AddressRange( 529 ),
    .AddressWidth( 10 ))
targetBlocks_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(targetBlocks_V_address0),
    .ce0(targetBlocks_V_ce0),
    .we0(targetBlocks_V_we0),
    .d0(grp_calcOF_fu_197_targetBlocks_V_d0),
    .q0(targetBlocks_V_q0)
);

accumulateHW grp_accumulateHW_fu_186(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_accumulateHW_fu_186_ap_start),
    .ap_done(grp_accumulateHW_fu_186_ap_done),
    .ap_idle(grp_accumulateHW_fu_186_ap_idle),
    .ap_ready(grp_accumulateHW_fu_186_ap_ready),
    .x(x_reg_552),
    .y(y_cast_reg_564),
    .pol(grp_accumulateHW_fu_186_pol),
    .glPLActiveSliceIdx_V(glPLActiveSliceIdx_V),
    .glPLSlices_V_address0(grp_accumulateHW_fu_186_glPLSlices_V_address0),
    .glPLSlices_V_ce0(grp_accumulateHW_fu_186_glPLSlices_V_ce0),
    .glPLSlices_V_we0(grp_accumulateHW_fu_186_glPLSlices_V_we0),
    .glPLSlices_V_d0(grp_accumulateHW_fu_186_glPLSlices_V_d0),
    .glPLSlices_V_q0(glPLSlices_V_q0)
);

calcOF grp_calcOF_fu_197(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_calcOF_fu_197_ap_start),
    .ap_done(grp_calcOF_fu_197_ap_done),
    .ap_idle(grp_calcOF_fu_197_ap_idle),
    .ap_ready(grp_calcOF_fu_197_ap_ready),
    .x(x_reg_552),
    .y(y_cast_reg_564),
    .glPLTminus1SliceIdx_s(glPLTminus1SliceIdx_s),
    .glPLTminus2SliceIdx_s(glPLTminus2SliceIdx_s),
    .glPLSlices_V_address0(grp_calcOF_fu_197_glPLSlices_V_address0),
    .glPLSlices_V_ce0(grp_calcOF_fu_197_glPLSlices_V_ce0),
    .glPLSlices_V_q0(glPLSlices_V_q0),
    .glPLSlices_V_address1(grp_calcOF_fu_197_glPLSlices_V_address1),
    .glPLSlices_V_ce1(grp_calcOF_fu_197_glPLSlices_V_ce1),
    .glPLSlices_V_q1(glPLSlices_V_q1),
    .refBlock_V_address0(grp_calcOF_fu_197_refBlock_V_address0),
    .refBlock_V_ce0(grp_calcOF_fu_197_refBlock_V_ce0),
    .refBlock_V_we0(grp_calcOF_fu_197_refBlock_V_we0),
    .refBlock_V_d0(grp_calcOF_fu_197_refBlock_V_d0),
    .targetBlocks_V_address0(grp_calcOF_fu_197_targetBlocks_V_address0),
    .targetBlocks_V_ce0(grp_calcOF_fu_197_targetBlocks_V_ce0),
    .targetBlocks_V_we0(grp_calcOF_fu_197_targetBlocks_V_we0),
    .targetBlocks_V_d0(grp_calcOF_fu_197_targetBlocks_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_accumulateHW_fu_186_ap_start_reg <= 1'b0;
    end else begin
        if ((~((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0)) & (tmp_6_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_accumulateHW_fu_186_ap_start_reg <= 1'b1;
        end else if ((grp_accumulateHW_fu_186_ap_ready == 1'b1)) begin
            grp_accumulateHW_fu_186_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_calcOF_fu_197_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_calcOF_fu_197_ap_start_reg <= 1'b1;
        end else if ((grp_calcOF_fu_197_ap_ready == 1'b1)) begin
            grp_calcOF_fu_197_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        glPLActiveSliceIdx_V <= 2'd0;
    end else if (((tmp_2_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        glPLActiveSliceIdx_V <= 2'd2;
    end else if (((tmp_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        glPLActiveSliceIdx_V <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        glPLTminus1SliceIdx_s <= 2'd2;
    end else if (((tmp_2_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        glPLTminus1SliceIdx_s <= 2'd1;
    end else if (((tmp_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        glPLTminus1SliceIdx_s <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        glPLTminus2SliceIdx_s <= 2'd1;
    end else if (((tmp_2_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        glPLTminus2SliceIdx_s <= 2'd0;
    end else if (((tmp_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        glPLTminus2SliceIdx_s <= 2'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((eventSlice_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_reg_175 <= i_1_reg_585;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_175 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((tmp_fu_217_p2 == 1'd0)) begin
            tmp_1_reg_151 <= glPLActiveSliceIdx_V;
        end else if ((tmp_fu_217_p2 == 1'd1)) begin
            tmp_1_reg_151 <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((tmp_2_fu_241_p2 == 1'd0)) begin
            tmp_3_reg_163 <= tmp_1_reg_151;
        end else if ((tmp_2_fu_241_p2 == 1'd1)) begin
            tmp_3_reg_163 <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((eventSlice_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        glCnt <= tmp_17_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0)) & (tmp_6_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_585 <= i_1_fu_388_p2;
        pol_reg_575 <= pol_fu_375_p2;
        tmp_10_reg_580 <= tmp_10_fu_382_p2;
        tmp_11_reg_547[10 : 3] <= tmp_11_fu_323_p2[10 : 3];
        tmp_18_reg_570 <= data_dout[32'd1];
        x_reg_552[14 : 0] <= x_fu_339_p1[14 : 0];
        y_cast_reg_564[14 : 0] <= y_cast_fu_354_p1[14 : 0];
        y_reg_559 <= {{data_dout[16:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_580 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        refBlock_V_load_reg_605 <= refBlock_V_q0;
        targetBlocks_V_load_reg_610 <= targetBlocks_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_10_reg_580 == 1'd0))) begin
        tmp1_reg_590 <= tmp1_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_10_reg_580 == 1'd0))) begin
        tmp3_reg_615 <= tmp3_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_5_reg_539[31 : 1] <= tmp_5_fu_289_p2[31 : 1];
    end
end

always @ (*) begin
    if ((~((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0)) & (tmp_6_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0)) & (tmp_6_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        data_blk_n = data_empty_n;
    end else begin
        data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0)) & (tmp_6_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        data_read = 1'b1;
    end else begin
        data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        eventSlice_blk_n = eventSlice_full_n;
    end else begin
        eventSlice_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((eventSlice_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        eventSlice_write = 1'b1;
    end else begin
        eventSlice_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        glPLSlices_V_address0 = grp_calcOF_fu_197_glPLSlices_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        glPLSlices_V_address0 = grp_accumulateHW_fu_186_glPLSlices_V_address0;
    end else begin
        glPLSlices_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        glPLSlices_V_ce0 = grp_calcOF_fu_197_glPLSlices_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        glPLSlices_V_ce0 = grp_accumulateHW_fu_186_glPLSlices_V_ce0;
    end else begin
        glPLSlices_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        glPLSlices_V_ce1 = grp_calcOF_fu_197_glPLSlices_V_ce1;
    end else begin
        glPLSlices_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        glPLSlices_V_we0 = grp_accumulateHW_fu_186_glPLSlices_V_we0;
    end else begin
        glPLSlices_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_10_reg_580 == 1'd0))) begin
        refBlock_V_address0 = tmp_21_cast_fu_421_p1;
    end else if (((tmp_10_reg_580 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        refBlock_V_address0 = 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        refBlock_V_address0 = grp_calcOF_fu_197_refBlock_V_address0;
    end else begin
        refBlock_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_580 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_state8) & (tmp_10_reg_580 == 1'd0)))) begin
        refBlock_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        refBlock_V_ce0 = grp_calcOF_fu_197_refBlock_V_ce0;
    end else begin
        refBlock_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        refBlock_V_we0 = grp_calcOF_fu_197_refBlock_V_we0;
    end else begin
        refBlock_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_10_reg_580 == 1'd0))) begin
        targetBlocks_V_address0 = tmp_21_cast_fu_421_p1;
    end else if (((tmp_10_reg_580 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        targetBlocks_V_address0 = 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        targetBlocks_V_address0 = grp_calcOF_fu_197_targetBlocks_V_address0;
    end else begin
        targetBlocks_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_580 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_state8) & (tmp_10_reg_580 == 1'd0)))) begin
        targetBlocks_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        targetBlocks_V_ce0 = grp_calcOF_fu_197_targetBlocks_V_ce0;
    end else begin
        targetBlocks_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        targetBlocks_V_we0 = grp_calcOF_fu_197_targetBlocks_V_we0;
    end else begin
        targetBlocks_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0)) & (tmp_6_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0)) & (tmp_6_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_accumulateHW_fu_186_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_calcOF_fu_197_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((eventSlice_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state4 = ((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_ignore_call19 = ((tmp_6_fu_294_p2 == 1'd1) & (data_empty_n == 1'b0));
end

assign eventSlice_din = $signed(storemerge_fu_492_p3);

assign grp_accumulateHW_fu_186_ap_start = grp_accumulateHW_fu_186_ap_start_reg;

assign grp_accumulateHW_fu_186_pol = pol_reg_575;

assign grp_calcOF_fu_197_ap_start = grp_calcOF_fu_197_ap_start_reg;

assign i_1_fu_388_p2 = (32'd2 + i_reg_175);

assign lhs_V_fu_444_p1 = $signed(sum);

assign p_shl1_cast_fu_315_p3 = {{tmp_9_fu_311_p1}, {3'd0}};

assign p_shl_cast_fu_303_p3 = {{tmp_7_fu_299_p1}, {5'd0}};

assign pol_fu_375_p2 = ((tmp_s_fu_367_p3 != 2'd0) ? 1'b1 : 1'b0);

assign r_V_1_fu_460_p2 = ($signed(r_V_fu_451_p2) + $signed(rhs_V_1_cast_fu_457_p1));

assign r_V_fu_451_p2 = ($signed(lhs_V_fu_444_p1) + $signed(rhs_V_fu_448_p1));

assign rhs_V_1_cast_fu_457_p1 = $signed(targetBlocks_V_load_reg_610);

assign rhs_V_fu_448_p1 = $signed(refBlock_V_load_reg_605);

assign storemerge_fu_492_p3 = ((tmp_10_reg_580[0:0] === 1'b1) ? tmp_11_cast_fu_466_p1 : tmp_16_fu_486_p2);

assign tmp1_cast_fu_470_p1 = tmp1_reg_590;

assign tmp1_fu_415_p2 = (tmp_15_cast_cast_fu_401_p1 + tmp_14_cast_fu_411_p1);

assign tmp2_cast_cast_fu_482_p1 = $signed(tmp2_fu_476_p2);

assign tmp2_fu_476_p2 = ($signed(tmp3_cast_fu_473_p1) + $signed(lhs_V_fu_444_p1));

assign tmp3_cast_fu_473_p1 = $signed(tmp3_reg_615);

assign tmp3_fu_434_p2 = ($signed(tmp_18_cast_fu_426_p1) + $signed(tmp_19_cast_fu_430_p1));

assign tmp_10_fu_382_p2 = ((i_reg_175 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_11_cast_fu_466_p1 = $signed(r_V_1_fu_460_p2);

assign tmp_11_fu_323_p2 = (p_shl_cast_fu_303_p3 - p_shl1_cast_fu_315_p3);

assign tmp_12_fu_394_p3 = {{y_reg_559}, {8'd0}};

assign tmp_13_fu_405_p3 = {{tmp_18_reg_570}, {x_reg_552}};

assign tmp_14_cast_fu_411_p1 = tmp_13_fu_405_p3;

assign tmp_15_cast_cast_fu_401_p1 = tmp_12_fu_394_p3;

assign tmp_15_fu_329_p4 = {{data_dout[31:17]}};

assign tmp_16_fu_486_p2 = ($signed(tmp2_cast_cast_fu_482_p1) + $signed(tmp1_cast_fu_470_p1));

assign tmp_17_fu_508_p2 = (16'd1 + glCnt);

assign tmp_18_cast_fu_426_p1 = $signed(refBlock_V_q0);

assign tmp_18_fu_359_p3 = data_dout[32'd1];

assign tmp_19_cast_fu_430_p1 = $signed(targetBlocks_V_q0);

assign tmp_21_cast_fu_421_p1 = $signed(tmp_11_reg_547);

assign tmp_2_fu_241_p2 = ((tmp_1_reg_151 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_4_fu_265_p2 = ((tmp_3_reg_163 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_5_fu_289_p2 = eventsArraySize << 32'd1;

assign tmp_6_fu_294_p2 = (($signed(i_reg_175) < $signed(tmp_5_reg_539)) ? 1'b1 : 1'b0);

assign tmp_7_fu_299_p1 = i_reg_175[5:0];

assign tmp_9_fu_311_p1 = i_reg_175[7:0];

assign tmp_fu_217_p2 = ((glPLActiveSliceIdx_V == 2'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_367_p3 = {{tmp_18_fu_359_p3}, {1'd0}};

assign x_fu_339_p1 = tmp_15_fu_329_p4;

assign y_cast_fu_354_p1 = y_fu_344_p4;

assign y_fu_344_p4 = {{data_dout[16:2]}};

always @ (posedge ap_clk) begin
    tmp_5_reg_539[0] <= 1'b0;
    tmp_11_reg_547[2:0] <= 3'b000;
    x_reg_552[15] <= 1'b0;
    y_cast_reg_564[15] <= 1'b0;
end

endmodule //parseEvents

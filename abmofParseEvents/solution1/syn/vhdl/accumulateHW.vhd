-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accumulateHW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    y : IN STD_LOGIC_VECTOR (15 downto 0);
    pol : IN STD_LOGIC;
    glPLActiveSliceIdx_V : IN STD_LOGIC_VECTOR (1 downto 0);
    glPLSlices_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    glPLSlices_V_ce0 : OUT STD_LOGIC;
    glPLSlices_V_we0 : OUT STD_LOGIC;
    glPLSlices_V_d0 : OUT STD_LOGIC_VECTOR (719 downto 0);
    glPLSlices_V_q0 : IN STD_LOGIC_VECTOR (719 downto 0) );
end;


architecture behav of accumulateHW is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pol_read_read_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal glPLSlices_V_addr_reg_299 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_fu_178_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_36_reg_304 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmpData_V_1_reg_309 : STD_LOGIC_VECTOR (719 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_182_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_reg_315 : STD_LOGIC_VECTOR (16 downto 0);
    signal yIndex_2_fu_195_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Result_s_fu_229_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpTmpData_V_fu_239_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpTmpData_V_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal yIndex_3_fu_251_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Result_2_fu_285_p4 : STD_LOGIC_VECTOR (719 downto 0);
    signal exitcond_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_reg_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal yIndex_reg_97 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_6_reg_108 : STD_LOGIC_VECTOR (719 downto 0);
    signal yIndex1_reg_118 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_41_cast_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_137_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_33_fu_149_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_145_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_157_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_129_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_161_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_fu_167_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_assign_cast_fu_205_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal bvh_d_index_2_fu_209_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal index_assign_2_cast_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bvh_d_index_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_cast_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_assign_4_cast_fu_261_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal bvh_d_index_3_fu_265_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal bvh_d_index_4_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_assign_3_cast_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_2_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Val2_6_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_245_p2 = ap_const_lv1_0) and (pol_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_6_reg_108 <= p_Result_2_fu_285_p4;
            elsif (((exitcond3_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_Val2_6_reg_108 <= tmpData_V_1_reg_309;
            end if; 
        end if;
    end process;

    yIndex1_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_245_p2 = ap_const_lv1_0) and (pol_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                yIndex1_reg_118 <= yIndex_3_fu_251_p2;
            elsif (((exitcond3_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                yIndex1_reg_118 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    yIndex_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                yIndex_reg_97 <= yIndex_2_fu_195_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                yIndex_reg_97 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (pol_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                glPLSlices_V_addr_reg_299 <= tmp_41_cast_fu_173_p1(10 - 1 downto 0);
                tmp_36_reg_304 <= tmp_36_fu_178_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Val2_4_reg_86 <= p_Result_s_fu_229_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmpData_V_1_reg_309 <= glPLSlices_V_q0;
                    tmp_s_reg_315(16 downto 2) <= tmp_s_fu_182_p3(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmpTmpData_V_reg_334 <= tmpTmpData_V_fu_239_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_315(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, pol_read_read_fu_56_p2, ap_CS_fsm_state3, exitcond3_fu_189_p2, ap_CS_fsm_state4, exitcond_fu_245_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (pol_read_read_fu_56_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_start = ap_const_logic_1) and (pol_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((exitcond_fu_245_p2 = ap_const_lv1_1) or (pol_read_read_fu_56_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, pol_read_read_fu_56_p2, ap_CS_fsm_state4, exitcond_fu_245_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and ((exitcond_fu_245_p2 = ap_const_lv1_1) or (pol_read_read_fu_56_p2 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(pol_read_read_fu_56_p2, ap_CS_fsm_state4, exitcond_fu_245_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((exitcond_fu_245_p2 = ap_const_lv1_1) or (pol_read_read_fu_56_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bvh_d_index_2_fu_209_p2 <= std_logic_vector(unsigned(index_assign_cast_fu_205_p1) + unsigned(tmp_s_reg_315));
    bvh_d_index_3_fu_265_p2 <= std_logic_vector(unsigned(index_assign_4_cast_fu_261_p1) + unsigned(tmp_s_reg_315));
    bvh_d_index_4_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yIndex1_reg_118),32));
    bvh_d_index_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yIndex_reg_97),32));
    exitcond3_fu_189_p2 <= "1" when (yIndex_reg_97 = ap_const_lv3_4) else "0";
    exitcond_fu_245_p2 <= "1" when (yIndex1_reg_118 = ap_const_lv3_4) else "0";

    glPLSlices_V_address0_assign_proc : process(ap_CS_fsm_state1, glPLSlices_V_addr_reg_299, ap_CS_fsm_state4, tmp_41_cast_fu_173_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            glPLSlices_V_address0 <= glPLSlices_V_addr_reg_299;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            glPLSlices_V_address0 <= tmp_41_cast_fu_173_p1(10 - 1 downto 0);
        else 
            glPLSlices_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            glPLSlices_V_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_V_d0 <= p_Val2_6_reg_108;

    glPLSlices_V_we0_assign_proc : process(pol_read_read_fu_56_p2, ap_CS_fsm_state4, exitcond_fu_245_p2)
    begin
        if (((exitcond_fu_245_p2 = ap_const_lv1_1) and (pol_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            glPLSlices_V_we0 <= ap_const_logic_1;
        else 
            glPLSlices_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    index_assign_2_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_2_fu_209_p2),32));
    index_assign_3_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_3_fu_265_p2),32));
    index_assign_4_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yIndex1_reg_118),17));
    index_assign_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yIndex_reg_97),17));
    p_Repl2_2_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_274_p3),64));
    p_Repl2_s_fu_218_p3 <= tmpData_V_1_reg_309(to_integer(unsigned(index_assign_2_cast_fu_214_p1)) downto to_integer(unsigned(index_assign_2_cast_fu_214_p1))) when (to_integer(unsigned(index_assign_2_cast_fu_214_p1))>= 0 and to_integer(unsigned(index_assign_2_cast_fu_214_p1))<=719) else "-";
    
    p_Result_2_fu_285_p4_proc : process(p_Val2_6_reg_108, index_assign_3_cast_fu_270_p1, p_Repl2_2_fu_281_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_2_fu_285_p4 <= p_Val2_6_reg_108;
        if to_integer(unsigned(index_assign_3_cast_fu_270_p1)) >= p_Val2_6_reg_108'low and to_integer(unsigned(index_assign_3_cast_fu_270_p1)) <= p_Val2_6_reg_108'high then
            result(0) := '0';
            for i in p_Repl2_2_fu_281_p1'range loop
                result(0) := result(0) or p_Repl2_2_fu_281_p1(i);
            end loop;
            p_Result_2_fu_285_p4(to_integer(unsigned(index_assign_3_cast_fu_270_p1))) <= result(0);
        end if;
    end process;

    
    p_Result_s_fu_229_p4_proc : process(p_Val2_4_reg_86, bvh_d_index_fu_201_p1, val_assign_cast_fu_225_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_s_fu_229_p4 <= p_Val2_4_reg_86;
        if to_integer(unsigned(bvh_d_index_fu_201_p1)) >= p_Val2_4_reg_86'low and to_integer(unsigned(bvh_d_index_fu_201_p1)) <= p_Val2_4_reg_86'high then
            result(0) := '0';
            for i in val_assign_cast_fu_225_p1'range loop
                result(0) := result(0) or val_assign_cast_fu_225_p1(i);
            end loop;
            p_Result_s_fu_229_p4(to_integer(unsigned(bvh_d_index_fu_201_p1))) <= result(0);
        end if;
    end process;

    p_shl1_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_149_p3),11));
    p_shl_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_137_p3),11));
    pol_read_read_fu_56_p2 <= (0=>pol, others=>'-');
    tmpTmpData_V_fu_239_p2 <= std_logic_vector(unsigned(p_Val2_4_reg_86) + unsigned(ap_const_lv4_1));
    tmp_32_fu_137_p3 <= (glPLActiveSliceIdx_V & ap_const_lv8_0);
    tmp_33_fu_149_p3 <= (glPLActiveSliceIdx_V & ap_const_lv4_0);
    tmp_34_fu_161_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_145_p1) - unsigned(p_shl1_cast_fu_157_p1));
    tmp_35_fu_167_p2 <= std_logic_vector(unsigned(tmp_fu_129_p1) + unsigned(tmp_34_fu_161_p2));
    tmp_36_fu_178_p1 <= y(15 - 1 downto 0);
    tmp_39_fu_274_p3 <= tmpTmpData_V_reg_334(to_integer(unsigned(bvh_d_index_4_fu_257_p1)) downto to_integer(unsigned(bvh_d_index_4_fu_257_p1))) when (to_integer(unsigned(bvh_d_index_4_fu_257_p1))>= 0 and to_integer(unsigned(bvh_d_index_4_fu_257_p1))<=3) else "-";
        tmp_41_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_167_p2),64));

    tmp_fu_129_p1 <= x(11 - 1 downto 0);
    tmp_s_fu_182_p3 <= (tmp_36_reg_304 & ap_const_lv2_0);
    val_assign_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_s_fu_218_p3),64));
    yIndex_2_fu_195_p2 <= std_logic_vector(unsigned(yIndex_reg_97) + unsigned(ap_const_lv3_1));
    yIndex_3_fu_251_p2 <= std_logic_vector(unsigned(yIndex1_reg_118) + unsigned(ap_const_lv3_1));
end behav;

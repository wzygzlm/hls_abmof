-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity parseEvents is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    eventsArraySize : IN STD_LOGIC_VECTOR (31 downto 0);
    eventSlice_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    eventSlice_full_n : IN STD_LOGIC;
    eventSlice_write : OUT STD_LOGIC );
end;


architecture behav of parseEvents is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "parseEvents,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007sclg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.755750,HLS_SYN_LAT=16285003,HLS_SYN_TPT=none,HLS_SYN_MEM=42,HLS_SYN_DSP=0,HLS_SYN_FF=3249,HLS_SYN_LUT=1050}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal glPLActiveSliceIdx_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal glPLTminus1SliceIdx_s : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal glPLTminus2SliceIdx_s : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal glPLSlices_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal glPLSlices_V_ce0 : STD_LOGIC;
    signal glPLSlices_V_we0 : STD_LOGIC;
    signal glPLSlices_V_q0 : STD_LOGIC_VECTOR (719 downto 0);
    signal glPLSlices_V_ce1 : STD_LOGIC;
    signal glPLSlices_V_q1 : STD_LOGIC_VECTOR (719 downto 0);
    signal refBlock_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal refBlock_V_ce0 : STD_LOGIC;
    signal refBlock_V_we0 : STD_LOGIC;
    signal refBlock_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal targetBlocks_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal targetBlocks_V_ce0 : STD_LOGIC;
    signal targetBlocks_V_we0 : STD_LOGIC;
    signal targetBlocks_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal glCnt : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_6_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eventSlice_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_5_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_11_fu_323_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_reg_547 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal x_fu_339_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_fu_344_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_reg_559 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_cast_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_cast_reg_564 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_415_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp1_reg_590 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal refBlock_V_load_reg_605 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal targetBlocks_V_load_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_fu_434_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_reg_615 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulateHW_fu_186_ap_start : STD_LOGIC;
    signal grp_accumulateHW_fu_186_ap_done : STD_LOGIC;
    signal grp_accumulateHW_fu_186_ap_idle : STD_LOGIC;
    signal grp_accumulateHW_fu_186_ap_ready : STD_LOGIC;
    signal grp_accumulateHW_fu_186_pol : STD_LOGIC;
    signal grp_accumulateHW_fu_186_glPLSlices_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_accumulateHW_fu_186_glPLSlices_V_ce0 : STD_LOGIC;
    signal grp_accumulateHW_fu_186_glPLSlices_V_we0 : STD_LOGIC;
    signal grp_accumulateHW_fu_186_glPLSlices_V_d0 : STD_LOGIC_VECTOR (719 downto 0);
    signal grp_calcOF_fu_197_ap_start : STD_LOGIC;
    signal grp_calcOF_fu_197_ap_done : STD_LOGIC;
    signal grp_calcOF_fu_197_ap_idle : STD_LOGIC;
    signal grp_calcOF_fu_197_ap_ready : STD_LOGIC;
    signal grp_calcOF_fu_197_glPLSlices_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calcOF_fu_197_glPLSlices_V_ce0 : STD_LOGIC;
    signal grp_calcOF_fu_197_glPLSlices_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calcOF_fu_197_glPLSlices_V_ce1 : STD_LOGIC;
    signal grp_calcOF_fu_197_refBlock_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calcOF_fu_197_refBlock_V_ce0 : STD_LOGIC;
    signal grp_calcOF_fu_197_refBlock_V_we0 : STD_LOGIC;
    signal grp_calcOF_fu_197_refBlock_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_calcOF_fu_197_targetBlocks_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calcOF_fu_197_targetBlocks_V_ce0 : STD_LOGIC;
    signal grp_calcOF_fu_197_targetBlocks_V_we0 : STD_LOGIC;
    signal grp_calcOF_fu_197_targetBlocks_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_reg_151 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_163 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulateHW_fu_186_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state4_ignore_call19 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_calcOF_fu_197_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_21_cast_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_299_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_303_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_315_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_329_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_367_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_394_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_405_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_cast_cast_fu_401_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_cast_fu_411_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_cast_fu_426_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_cast_fu_430_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_fu_444_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_448_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_451_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_1_cast_fu_457_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_fu_460_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp3_cast_fu_473_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp2_fu_476_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp2_cast_cast_fu_482_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp1_cast_fu_470_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_11_cast_fu_466_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_16_fu_486_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal storemerge_fu_492_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component accumulateHW IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        y : IN STD_LOGIC_VECTOR (15 downto 0);
        pol : IN STD_LOGIC;
        glPLActiveSliceIdx_V : IN STD_LOGIC_VECTOR (1 downto 0);
        glPLSlices_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        glPLSlices_V_ce0 : OUT STD_LOGIC;
        glPLSlices_V_we0 : OUT STD_LOGIC;
        glPLSlices_V_d0 : OUT STD_LOGIC_VECTOR (719 downto 0);
        glPLSlices_V_q0 : IN STD_LOGIC_VECTOR (719 downto 0) );
    end component;


    component calcOF IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        y : IN STD_LOGIC_VECTOR (15 downto 0);
        glPLTminus1SliceIdx_s : IN STD_LOGIC_VECTOR (1 downto 0);
        glPLTminus2SliceIdx_s : IN STD_LOGIC_VECTOR (1 downto 0);
        glPLSlices_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        glPLSlices_V_ce0 : OUT STD_LOGIC;
        glPLSlices_V_q0 : IN STD_LOGIC_VECTOR (719 downto 0);
        glPLSlices_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        glPLSlices_V_ce1 : OUT STD_LOGIC;
        glPLSlices_V_q1 : IN STD_LOGIC_VECTOR (719 downto 0);
        refBlock_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        refBlock_V_ce0 : OUT STD_LOGIC;
        refBlock_V_we0 : OUT STD_LOGIC;
        refBlock_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        targetBlocks_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        targetBlocks_V_ce0 : OUT STD_LOGIC;
        targetBlocks_V_we0 : OUT STD_LOGIC;
        targetBlocks_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component parseEvents_glPLSbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (719 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (719 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (719 downto 0) );
    end component;


    component parseEvents_refBlcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    glPLSlices_V_U : component parseEvents_glPLSbkb
    generic map (
        DataWidth => 720,
        AddressRange => 720,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => glPLSlices_V_address0,
        ce0 => glPLSlices_V_ce0,
        we0 => glPLSlices_V_we0,
        d0 => grp_accumulateHW_fu_186_glPLSlices_V_d0,
        q0 => glPLSlices_V_q0,
        address1 => grp_calcOF_fu_197_glPLSlices_V_address1,
        ce1 => glPLSlices_V_ce1,
        q1 => glPLSlices_V_q1);

    refBlock_V_U : component parseEvents_refBlcud
    generic map (
        DataWidth => 4,
        AddressRange => 529,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => refBlock_V_address0,
        ce0 => refBlock_V_ce0,
        we0 => refBlock_V_we0,
        d0 => grp_calcOF_fu_197_refBlock_V_d0,
        q0 => refBlock_V_q0);

    targetBlocks_V_U : component parseEvents_refBlcud
    generic map (
        DataWidth => 4,
        AddressRange => 529,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => targetBlocks_V_address0,
        ce0 => targetBlocks_V_ce0,
        we0 => targetBlocks_V_we0,
        d0 => grp_calcOF_fu_197_targetBlocks_V_d0,
        q0 => targetBlocks_V_q0);

    grp_accumulateHW_fu_186 : component accumulateHW
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_accumulateHW_fu_186_ap_start,
        ap_done => grp_accumulateHW_fu_186_ap_done,
        ap_idle => grp_accumulateHW_fu_186_ap_idle,
        ap_ready => grp_accumulateHW_fu_186_ap_ready,
        x => x_reg_552,
        y => y_cast_reg_564,
        pol => grp_accumulateHW_fu_186_pol,
        glPLActiveSliceIdx_V => glPLActiveSliceIdx_V,
        glPLSlices_V_address0 => grp_accumulateHW_fu_186_glPLSlices_V_address0,
        glPLSlices_V_ce0 => grp_accumulateHW_fu_186_glPLSlices_V_ce0,
        glPLSlices_V_we0 => grp_accumulateHW_fu_186_glPLSlices_V_we0,
        glPLSlices_V_d0 => grp_accumulateHW_fu_186_glPLSlices_V_d0,
        glPLSlices_V_q0 => glPLSlices_V_q0);

    grp_calcOF_fu_197 : component calcOF
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_calcOF_fu_197_ap_start,
        ap_done => grp_calcOF_fu_197_ap_done,
        ap_idle => grp_calcOF_fu_197_ap_idle,
        ap_ready => grp_calcOF_fu_197_ap_ready,
        x => x_reg_552,
        y => y_cast_reg_564,
        glPLTminus1SliceIdx_s => glPLTminus1SliceIdx_s,
        glPLTminus2SliceIdx_s => glPLTminus2SliceIdx_s,
        glPLSlices_V_address0 => grp_calcOF_fu_197_glPLSlices_V_address0,
        glPLSlices_V_ce0 => grp_calcOF_fu_197_glPLSlices_V_ce0,
        glPLSlices_V_q0 => glPLSlices_V_q0,
        glPLSlices_V_address1 => grp_calcOF_fu_197_glPLSlices_V_address1,
        glPLSlices_V_ce1 => grp_calcOF_fu_197_glPLSlices_V_ce1,
        glPLSlices_V_q1 => glPLSlices_V_q1,
        refBlock_V_address0 => grp_calcOF_fu_197_refBlock_V_address0,
        refBlock_V_ce0 => grp_calcOF_fu_197_refBlock_V_ce0,
        refBlock_V_we0 => grp_calcOF_fu_197_refBlock_V_we0,
        refBlock_V_d0 => grp_calcOF_fu_197_refBlock_V_d0,
        targetBlocks_V_address0 => grp_calcOF_fu_197_targetBlocks_V_address0,
        targetBlocks_V_ce0 => grp_calcOF_fu_197_targetBlocks_V_ce0,
        targetBlocks_V_we0 => grp_calcOF_fu_197_targetBlocks_V_we0,
        targetBlocks_V_d0 => grp_calcOF_fu_197_targetBlocks_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_accumulateHW_fu_186_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_accumulateHW_fu_186_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0))) and (tmp_6_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_accumulateHW_fu_186_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_accumulateHW_fu_186_ap_ready = ap_const_logic_1)) then 
                    grp_accumulateHW_fu_186_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_calcOF_fu_197_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_calcOF_fu_197_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_calcOF_fu_197_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calcOF_fu_197_ap_ready = ap_const_logic_1)) then 
                    grp_calcOF_fu_197_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    glPLActiveSliceIdx_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                glPLActiveSliceIdx_V <= ap_const_lv2_0;
            elsif (((tmp_2_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                glPLActiveSliceIdx_V <= ap_const_lv2_2;
            elsif (((tmp_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                glPLActiveSliceIdx_V <= ap_const_lv2_1;
            end if; 
        end if;
    end process;

    glPLTminus1SliceIdx_s_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                glPLTminus1SliceIdx_s <= ap_const_lv2_2;
            elsif (((tmp_2_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                glPLTminus1SliceIdx_s <= ap_const_lv2_1;
            elsif (((tmp_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                glPLTminus1SliceIdx_s <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    glPLTminus2SliceIdx_s_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                glPLTminus2SliceIdx_s <= ap_const_lv2_1;
            elsif (((tmp_2_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                glPLTminus2SliceIdx_s <= ap_const_lv2_0;
            elsif (((tmp_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                glPLTminus2SliceIdx_s <= ap_const_lv2_2;
            end if; 
        end if;
    end process;

    i_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((eventSlice_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_reg_175 <= i_1_reg_585;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_175 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    tmp_1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((tmp_fu_217_p2 = ap_const_lv1_0)) then 
                    tmp_1_reg_151 <= glPLActiveSliceIdx_V;
                elsif ((tmp_fu_217_p2 = ap_const_lv1_1)) then 
                    tmp_1_reg_151 <= ap_const_lv2_1;
                end if;
            end if; 
        end if;
    end process;

    tmp_3_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((tmp_2_fu_241_p2 = ap_const_lv1_0)) then 
                    tmp_3_reg_163 <= tmp_1_reg_151;
                elsif ((tmp_2_fu_241_p2 = ap_const_lv1_1)) then 
                    tmp_3_reg_163 <= ap_const_lv2_2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((eventSlice_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                glCnt <= tmp_17_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0))) and (tmp_6_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_1_reg_585 <= i_1_fu_388_p2;
                pol_reg_575 <= pol_fu_375_p2;
                tmp_10_reg_580 <= tmp_10_fu_382_p2;
                    tmp_11_reg_547(10 downto 3) <= tmp_11_fu_323_p2(10 downto 3);
                tmp_18_reg_570 <= data_dout(1 downto 1);
                    x_reg_552(14 downto 0) <= x_fu_339_p1(14 downto 0);
                    y_cast_reg_564(14 downto 0) <= y_cast_fu_354_p1(14 downto 0);
                y_reg_559 <= data_dout(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                refBlock_V_load_reg_605 <= refBlock_V_q0;
                targetBlocks_V_load_reg_610 <= targetBlocks_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_10_reg_580 = ap_const_lv1_0))) then
                tmp1_reg_590 <= tmp1_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_10_reg_580 = ap_const_lv1_0))) then
                tmp3_reg_615 <= tmp3_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_5_reg_539(31 downto 1) <= tmp_5_fu_289_p2(31 downto 1);
            end if;
        end if;
    end process;
    tmp_5_reg_539(0) <= '0';
    tmp_11_reg_547(2 downto 0) <= "000";
    x_reg_552(15) <= '0';
    y_cast_reg_564(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_empty_n, eventSlice_full_n, ap_CS_fsm_state4, tmp_6_fu_294_p2, ap_CS_fsm_state10, grp_accumulateHW_fu_186_ap_done, grp_calcOF_fu_197_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0))) and (tmp_6_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0))) and (tmp_6_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_accumulateHW_fu_186_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_calcOF_fu_197_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((eventSlice_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state4_assign_proc : process(data_empty_n, tmp_6_fu_294_p2)
    begin
                ap_block_state4 <= ((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_ignore_call19_assign_proc : process(data_empty_n, tmp_6_fu_294_p2)
    begin
                ap_block_state4_ignore_call19 <= ((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(data_empty_n, ap_CS_fsm_state4, tmp_6_fu_294_p2)
    begin
        if ((not(((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0))) and (tmp_6_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(data_empty_n, ap_CS_fsm_state4, tmp_6_fu_294_p2)
    begin
        if ((not(((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0))) and (tmp_6_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_assign_proc : process(data_empty_n, ap_CS_fsm_state4, tmp_6_fu_294_p2)
    begin
        if (((tmp_6_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_blk_n <= data_empty_n;
        else 
            data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_read_assign_proc : process(data_empty_n, ap_CS_fsm_state4, tmp_6_fu_294_p2)
    begin
        if ((not(((tmp_6_fu_294_p2 = ap_const_lv1_1) and (data_empty_n = ap_const_logic_0))) and (tmp_6_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;


    eventSlice_blk_n_assign_proc : process(eventSlice_full_n, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            eventSlice_blk_n <= eventSlice_full_n;
        else 
            eventSlice_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        eventSlice_din <= std_logic_vector(IEEE.numeric_std.resize(signed(storemerge_fu_492_p3),32));


    eventSlice_write_assign_proc : process(eventSlice_full_n, ap_CS_fsm_state10)
    begin
        if (((eventSlice_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            eventSlice_write <= ap_const_logic_1;
        else 
            eventSlice_write <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_V_address0_assign_proc : process(grp_accumulateHW_fu_186_glPLSlices_V_address0, grp_calcOF_fu_197_glPLSlices_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            glPLSlices_V_address0 <= grp_calcOF_fu_197_glPLSlices_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            glPLSlices_V_address0 <= grp_accumulateHW_fu_186_glPLSlices_V_address0;
        else 
            glPLSlices_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_V_ce0_assign_proc : process(grp_accumulateHW_fu_186_glPLSlices_V_ce0, grp_calcOF_fu_197_glPLSlices_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            glPLSlices_V_ce0 <= grp_calcOF_fu_197_glPLSlices_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            glPLSlices_V_ce0 <= grp_accumulateHW_fu_186_glPLSlices_V_ce0;
        else 
            glPLSlices_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_V_ce1_assign_proc : process(grp_calcOF_fu_197_glPLSlices_V_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            glPLSlices_V_ce1 <= grp_calcOF_fu_197_glPLSlices_V_ce1;
        else 
            glPLSlices_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_V_we0_assign_proc : process(grp_accumulateHW_fu_186_glPLSlices_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            glPLSlices_V_we0 <= grp_accumulateHW_fu_186_glPLSlices_V_we0;
        else 
            glPLSlices_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_accumulateHW_fu_186_ap_start <= grp_accumulateHW_fu_186_ap_start_reg;
    grp_accumulateHW_fu_186_pol <= pol_reg_575(0);
    grp_calcOF_fu_197_ap_start <= grp_calcOF_fu_197_ap_start_reg;
    i_1_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(i_reg_175));
        lhs_V_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum),17));

    p_shl1_cast_fu_315_p3 <= (tmp_9_fu_311_p1 & ap_const_lv3_0);
    p_shl_cast_fu_303_p3 <= (tmp_7_fu_299_p1 & ap_const_lv5_0);
    pol_fu_375_p2 <= "0" when (tmp_s_fu_367_p3 = ap_const_lv2_0) else "1";
    r_V_1_fu_460_p2 <= std_logic_vector(unsigned(r_V_fu_451_p2) + unsigned(rhs_V_1_cast_fu_457_p1));
    r_V_fu_451_p2 <= std_logic_vector(signed(lhs_V_fu_444_p1) + signed(rhs_V_fu_448_p1));

    refBlock_V_address0_assign_proc : process(tmp_10_reg_580, ap_CS_fsm_state8, grp_calcOF_fu_197_refBlock_V_address0, ap_CS_fsm_state7, tmp_21_cast_fu_421_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_10_reg_580 = ap_const_lv1_0))) then 
            refBlock_V_address0 <= tmp_21_cast_fu_421_p1(10 - 1 downto 0);
        elsif (((tmp_10_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            refBlock_V_address0 <= ap_const_lv10_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            refBlock_V_address0 <= grp_calcOF_fu_197_refBlock_V_address0;
        else 
            refBlock_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    refBlock_V_ce0_assign_proc : process(tmp_10_reg_580, ap_CS_fsm_state8, grp_calcOF_fu_197_refBlock_V_ce0, ap_CS_fsm_state7)
    begin
        if ((((tmp_10_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_10_reg_580 = ap_const_lv1_0)))) then 
            refBlock_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            refBlock_V_ce0 <= grp_calcOF_fu_197_refBlock_V_ce0;
        else 
            refBlock_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    refBlock_V_we0_assign_proc : process(grp_calcOF_fu_197_refBlock_V_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            refBlock_V_we0 <= grp_calcOF_fu_197_refBlock_V_we0;
        else 
            refBlock_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        rhs_V_1_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(targetBlocks_V_load_reg_610),17));

        rhs_V_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(refBlock_V_load_reg_605),17));

    storemerge_fu_492_p3 <= 
        tmp_11_cast_fu_466_p1 when (tmp_10_reg_580(0) = '1') else 
        tmp_16_fu_486_p2;

    targetBlocks_V_address0_assign_proc : process(tmp_10_reg_580, ap_CS_fsm_state8, grp_calcOF_fu_197_targetBlocks_V_address0, ap_CS_fsm_state7, tmp_21_cast_fu_421_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_10_reg_580 = ap_const_lv1_0))) then 
            targetBlocks_V_address0 <= tmp_21_cast_fu_421_p1(10 - 1 downto 0);
        elsif (((tmp_10_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            targetBlocks_V_address0 <= ap_const_lv10_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            targetBlocks_V_address0 <= grp_calcOF_fu_197_targetBlocks_V_address0;
        else 
            targetBlocks_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    targetBlocks_V_ce0_assign_proc : process(tmp_10_reg_580, ap_CS_fsm_state8, grp_calcOF_fu_197_targetBlocks_V_ce0, ap_CS_fsm_state7)
    begin
        if ((((tmp_10_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_10_reg_580 = ap_const_lv1_0)))) then 
            targetBlocks_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            targetBlocks_V_ce0 <= grp_calcOF_fu_197_targetBlocks_V_ce0;
        else 
            targetBlocks_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    targetBlocks_V_we0_assign_proc : process(grp_calcOF_fu_197_targetBlocks_V_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            targetBlocks_V_we0 <= grp_calcOF_fu_197_targetBlocks_V_we0;
        else 
            targetBlocks_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_reg_590),25));
    tmp1_fu_415_p2 <= std_logic_vector(unsigned(tmp_15_cast_cast_fu_401_p1) + unsigned(tmp_14_cast_fu_411_p1));
        tmp2_cast_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_476_p2),25));

    tmp2_fu_476_p2 <= std_logic_vector(signed(tmp3_cast_fu_473_p1) + signed(lhs_V_fu_444_p1));
        tmp3_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_reg_615),17));

    tmp3_fu_434_p2 <= std_logic_vector(signed(tmp_18_cast_fu_426_p1) + signed(tmp_19_cast_fu_430_p1));
    tmp_10_fu_382_p2 <= "1" when (i_reg_175 = ap_const_lv32_0) else "0";
        tmp_11_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_460_p2),25));

    tmp_11_fu_323_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_303_p3) - unsigned(p_shl1_cast_fu_315_p3));
    tmp_12_fu_394_p3 <= (y_reg_559 & ap_const_lv8_0);
    tmp_13_fu_405_p3 <= (tmp_18_reg_570 & x_reg_552);
    tmp_14_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_405_p3),24));
    tmp_15_cast_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_394_p3),24));
    tmp_15_fu_329_p4 <= data_dout(31 downto 17);
    tmp_16_fu_486_p2 <= std_logic_vector(signed(tmp2_cast_cast_fu_482_p1) + signed(tmp1_cast_fu_470_p1));
    tmp_17_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(glCnt));
        tmp_18_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(refBlock_V_q0),5));

    tmp_18_fu_359_p3 <= data_dout(1 downto 1);
        tmp_19_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(targetBlocks_V_q0),5));

        tmp_21_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_547),64));

    tmp_2_fu_241_p2 <= "1" when (tmp_1_reg_151 = ap_const_lv2_1) else "0";
    tmp_4_fu_265_p2 <= "1" when (tmp_3_reg_163 = ap_const_lv2_2) else "0";
    tmp_5_fu_289_p2 <= std_logic_vector(shift_left(unsigned(eventsArraySize),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_6_fu_294_p2 <= "1" when (signed(i_reg_175) < signed(tmp_5_reg_539)) else "0";
    tmp_7_fu_299_p1 <= i_reg_175(6 - 1 downto 0);
    tmp_9_fu_311_p1 <= i_reg_175(8 - 1 downto 0);
    tmp_fu_217_p2 <= "1" when (glPLActiveSliceIdx_V = ap_const_lv2_0) else "0";
    tmp_s_fu_367_p3 <= (tmp_18_fu_359_p3 & ap_const_lv1_0);
    x_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_329_p4),16));
    y_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_344_p4),16));
    y_fu_344_p4 <= data_dout(16 downto 2);
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calcOF is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    y : IN STD_LOGIC_VECTOR (15 downto 0);
    glPLTminus1SliceIdx_s : IN STD_LOGIC_VECTOR (1 downto 0);
    glPLTminus2SliceIdx_s : IN STD_LOGIC_VECTOR (1 downto 0);
    glPLSlices_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    glPLSlices_V_ce0 : OUT STD_LOGIC;
    glPLSlices_V_q0 : IN STD_LOGIC_VECTOR (719 downto 0);
    glPLSlices_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    glPLSlices_V_ce1 : OUT STD_LOGIC;
    glPLSlices_V_q1 : IN STD_LOGIC_VECTOR (719 downto 0);
    refBlock_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    refBlock_V_ce0 : OUT STD_LOGIC;
    refBlock_V_we0 : OUT STD_LOGIC;
    refBlock_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    targetBlocks_V_ce0 : OUT STD_LOGIC;
    targetBlocks_V_we0 : OUT STD_LOGIC;
    targetBlocks_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of calcOF is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_17 : STD_LOGIC_VECTOR (9 downto 0) := "0000010111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_195_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_reg_448 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_231_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_reg_453 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_265_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_reg_458 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_463 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_1_fu_283_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_471 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_reg_486 : STD_LOGIC_VECTOR (719 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp2_V_reg_491 : STD_LOGIC_VECTOR (719 downto 0);
    signal l_1_fu_328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_1_reg_499 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal yIndex_1_fu_340_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_reg_137 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal l_reg_160 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal yIndex_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_34_cast_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_70 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_1_fu_395_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_1_fu_74 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_fu_374_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_191_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_19_fu_207_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_219_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_215_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_227_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_241_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_253_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_249_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_261_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_293_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_fu_289_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_296_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_302_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_assign_cast_fu_350_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal bvh_d_index_1_fu_354_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal index_assign_1_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bvh_d_index_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_cast_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Repl2_1_fu_384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_cast_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_415_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    k_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_322_p2 = ap_const_lv1_1))) then 
                k_reg_137 <= k_1_reg_471;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_137 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    l_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_334_p2 = ap_const_lv1_1))) then 
                l_reg_160 <= l_1_reg_499;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                l_reg_160 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_322_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_148 <= next_mul_reg_463;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_148 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    yIndex_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                yIndex_reg_172 <= yIndex_1_fu_340_p2;
            elsif (((exitcond2_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                yIndex_reg_172 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_1_reg_471 <= k_1_fu_283_p2;
                next_mul_reg_463 <= next_mul_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                l_1_reg_499 <= l_1_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                p_Val2_1_fu_74 <= p_Result_s_fu_374_p4;
                p_Val2_s_fu_70 <= p_Result_1_fu_395_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp1_V_reg_486 <= glPLSlices_V_q0;
                tmp2_V_reg_491 <= glPLSlices_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_21_reg_453(10 downto 4) <= tmp_21_fu_231_p2(10 downto 4);
                    tmp_25_reg_458(10 downto 4) <= tmp_25_fu_265_p2(10 downto 4);
                    tmp_s_reg_448(16 downto 2) <= tmp_s_fu_195_p3(16 downto 2);
            end if;
        end if;
    end process;
    tmp_s_reg_448(1 downto 0) <= "00";
    tmp_21_reg_453(3 downto 0) <= "0000";
    tmp_25_reg_458(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_277_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond2_fu_322_p2, exitcond_fu_334_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_322_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_334_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_277_p2)
    begin
        if ((((exitcond1_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_277_p2)
    begin
        if (((exitcond1_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bvh_d_index_1_fu_354_p2 <= std_logic_vector(unsigned(index_assign_cast_fu_350_p1) + unsigned(tmp_s_reg_448));
    bvh_d_index_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yIndex_reg_172),32));
    exitcond1_fu_277_p2 <= "1" when (k_reg_137 = ap_const_lv5_17) else "0";
    exitcond2_fu_322_p2 <= "1" when (l_reg_160 = ap_const_lv5_17) else "0";
    exitcond_fu_334_p2 <= "1" when (yIndex_reg_172 = ap_const_lv3_4) else "0";
    glPLSlices_V_address0 <= tmp_34_cast_fu_307_p1(10 - 1 downto 0);
    glPLSlices_V_address1 <= tmp_35_cast_fu_317_p1(10 - 1 downto 0);

    glPLSlices_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_V_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_V_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_V_ce1 <= ap_const_logic_1;
        else 
            glPLSlices_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    index_assign_1_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_1_fu_354_p2),32));
    index_assign_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yIndex_reg_172),17));
    k_1_fu_283_p2 <= std_logic_vector(unsigned(k_reg_137) + unsigned(ap_const_lv5_1));
    l_1_fu_328_p2 <= std_logic_vector(unsigned(l_reg_160) + unsigned(ap_const_lv5_1));
    next_mul_fu_271_p2 <= std_logic_vector(unsigned(phi_mul_reg_148) + unsigned(ap_const_lv10_17));
    p_Repl2_1_fu_384_p3 <= tmp2_V_reg_491(to_integer(unsigned(index_assign_1_cast_fu_359_p1)) downto to_integer(unsigned(index_assign_1_cast_fu_359_p1))) when (to_integer(unsigned(index_assign_1_cast_fu_359_p1))>= 0 and to_integer(unsigned(index_assign_1_cast_fu_359_p1))<=719) else "-";
    p_Repl2_s_fu_363_p3 <= tmp1_V_reg_486(to_integer(unsigned(index_assign_1_cast_fu_359_p1)) downto to_integer(unsigned(index_assign_1_cast_fu_359_p1))) when (to_integer(unsigned(index_assign_1_cast_fu_359_p1))>= 0 and to_integer(unsigned(index_assign_1_cast_fu_359_p1))<=719) else "-";
    
    p_Result_1_fu_395_p4_proc : process(p_Val2_s_fu_70, bvh_d_index_fu_346_p1, val_assign_1_cast_fu_391_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_1_fu_395_p4 <= p_Val2_s_fu_70;
        if to_integer(unsigned(bvh_d_index_fu_346_p1)) >= p_Val2_s_fu_70'low and to_integer(unsigned(bvh_d_index_fu_346_p1)) <= p_Val2_s_fu_70'high then
            result(0) := '0';
            for i in val_assign_1_cast_fu_391_p1'range loop
                result(0) := result(0) or val_assign_1_cast_fu_391_p1(i);
            end loop;
            p_Result_1_fu_395_p4(to_integer(unsigned(bvh_d_index_fu_346_p1))) <= result(0);
        end if;
    end process;

    
    p_Result_s_fu_374_p4_proc : process(p_Val2_1_fu_74, bvh_d_index_fu_346_p1, val_assign_cast_fu_370_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_s_fu_374_p4 <= p_Val2_1_fu_74;
        if to_integer(unsigned(bvh_d_index_fu_346_p1)) >= p_Val2_1_fu_74'low and to_integer(unsigned(bvh_d_index_fu_346_p1)) <= p_Val2_1_fu_74'high then
            result(0) := '0';
            for i in val_assign_cast_fu_370_p1'range loop
                result(0) := result(0) or val_assign_cast_fu_370_p1(i);
            end loop;
            p_Result_s_fu_374_p4(to_integer(unsigned(bvh_d_index_fu_346_p1))) <= result(0);
        end if;
    end process;

    p_shl1_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_253_p3),11));
    p_shl2_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_207_p3),11));
    p_shl3_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_219_p3),11));
    p_shl_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_241_p3),11));
    refBlock_V_address0 <= tmp_37_cast_fu_425_p1(10 - 1 downto 0);

    refBlock_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            refBlock_V_ce0 <= ap_const_logic_1;
        else 
            refBlock_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    refBlock_V_d0 <= p_Val2_1_fu_74;

    refBlock_V_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_334_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_334_p2 = ap_const_lv1_1))) then 
            refBlock_V_we0 <= ap_const_logic_1;
        else 
            refBlock_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    targetBlocks_V_address0 <= tmp_37_cast_fu_425_p1(10 - 1 downto 0);

    targetBlocks_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            targetBlocks_V_ce0 <= ap_const_logic_1;
        else 
            targetBlocks_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    targetBlocks_V_d0 <= p_Val2_s_fu_70;

    targetBlocks_V_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_334_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_334_p2 = ap_const_lv1_1))) then 
            targetBlocks_V_we0 <= ap_const_logic_1;
        else 
            targetBlocks_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_207_p3 <= (glPLTminus1SliceIdx_s & ap_const_lv8_0);
    tmp_20_fu_219_p3 <= (glPLTminus1SliceIdx_s & ap_const_lv4_0);
    tmp_21_fu_231_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_215_p1) - unsigned(p_shl3_cast_fu_227_p1));
    tmp_23_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_160),10));
    tmp_23_fu_241_p3 <= (glPLTminus2SliceIdx_s & ap_const_lv8_0);
    tmp_24_fu_253_p3 <= (glPLTminus2SliceIdx_s & ap_const_lv4_0);
    tmp_25_fu_265_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_249_p1) - unsigned(p_shl1_cast_fu_261_p1));
    tmp_26_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_137),11));
    tmp_27_fu_293_p1 <= x(11 - 1 downto 0);
    tmp_28_fu_296_p2 <= std_logic_vector(unsigned(tmp_27_fu_293_p1) + unsigned(tmp_26_fu_289_p1));
    tmp_29_fu_302_p2 <= std_logic_vector(unsigned(tmp_21_reg_453) + unsigned(tmp_28_fu_296_p2));
    tmp_30_fu_312_p2 <= std_logic_vector(unsigned(tmp_25_reg_458) + unsigned(tmp_28_fu_296_p2));
    tmp_31_fu_419_p2 <= std_logic_vector(unsigned(phi_mul_reg_148) + unsigned(tmp_23_cast_fu_415_p1));
        tmp_34_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_302_p2),64));

        tmp_35_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_312_p2),64));

    tmp_37_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_419_p2),64));
    tmp_fu_191_p1 <= y(15 - 1 downto 0);
    tmp_s_fu_195_p3 <= (tmp_fu_191_p1 & ap_const_lv2_0);
    val_assign_1_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_1_fu_384_p3),64));
    val_assign_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_s_fu_363_p3),64));
    yIndex_1_fu_340_p2 <= std_logic_vector(unsigned(yIndex_reg_172) + unsigned(ap_const_lv3_1));
end behav;

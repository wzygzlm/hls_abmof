// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "accumulateHW.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic accumulateHW::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic accumulateHW::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> accumulateHW::ap_ST_fsm_state1 = "1";
const sc_lv<4> accumulateHW::ap_ST_fsm_state2 = "10";
const sc_lv<4> accumulateHW::ap_ST_fsm_state3 = "100";
const sc_lv<4> accumulateHW::ap_ST_fsm_state4 = "1000";
const sc_lv<32> accumulateHW::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> accumulateHW::ap_const_lv1_1 = "1";
const sc_lv<32> accumulateHW::ap_const_lv32_1 = "1";
const sc_lv<32> accumulateHW::ap_const_lv32_2 = "10";
const sc_lv<1> accumulateHW::ap_const_lv1_0 = "0";
const sc_lv<32> accumulateHW::ap_const_lv32_3 = "11";
const sc_lv<3> accumulateHW::ap_const_lv3_0 = "000";
const sc_lv<8> accumulateHW::ap_const_lv8_0 = "00000000";
const sc_lv<4> accumulateHW::ap_const_lv4_0 = "0000";
const sc_lv<2> accumulateHW::ap_const_lv2_0 = "00";
const sc_lv<3> accumulateHW::ap_const_lv3_4 = "100";
const sc_lv<3> accumulateHW::ap_const_lv3_1 = "1";
const sc_lv<4> accumulateHW::ap_const_lv4_1 = "1";
const bool accumulateHW::ap_const_boolean_1 = true;

accumulateHW::accumulateHW(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( pol_read_read_fu_56_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_245_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( pol_read_read_fu_56_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_245_p2 );

    SC_METHOD(thread_bvh_d_index_2_fu_209_p2);
    sensitive << ( tmp_s_reg_315 );
    sensitive << ( index_assign_cast_fu_205_p1 );

    SC_METHOD(thread_bvh_d_index_3_fu_265_p2);
    sensitive << ( tmp_s_reg_315 );
    sensitive << ( index_assign_4_cast_fu_261_p1 );

    SC_METHOD(thread_bvh_d_index_4_fu_257_p1);
    sensitive << ( yIndex1_reg_118 );

    SC_METHOD(thread_bvh_d_index_fu_201_p1);
    sensitive << ( yIndex_reg_97 );

    SC_METHOD(thread_exitcond3_fu_189_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( yIndex_reg_97 );

    SC_METHOD(thread_exitcond_fu_245_p2);
    sensitive << ( pol_read_read_fu_56_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( yIndex1_reg_118 );

    SC_METHOD(thread_glPLSlices_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( glPLSlices_V_addr_reg_299 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_41_cast_fu_173_p1 );

    SC_METHOD(thread_glPLSlices_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_glPLSlices_V_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_Val2_6_reg_108 );

    SC_METHOD(thread_glPLSlices_V_we0);
    sensitive << ( pol_read_read_fu_56_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_245_p2 );

    SC_METHOD(thread_index_assign_2_cast_fu_214_p1);
    sensitive << ( bvh_d_index_2_fu_209_p2 );

    SC_METHOD(thread_index_assign_3_cast_fu_270_p1);
    sensitive << ( bvh_d_index_3_fu_265_p2 );

    SC_METHOD(thread_index_assign_4_cast_fu_261_p1);
    sensitive << ( yIndex1_reg_118 );

    SC_METHOD(thread_index_assign_cast_fu_205_p1);
    sensitive << ( yIndex_reg_97 );

    SC_METHOD(thread_p_Repl2_2_fu_281_p1);
    sensitive << ( tmp_39_fu_274_p3 );

    SC_METHOD(thread_p_Repl2_s_fu_218_p3);
    sensitive << ( tmpData_V_1_reg_309 );
    sensitive << ( index_assign_2_cast_fu_214_p1 );

    SC_METHOD(thread_p_Result_2_fu_285_p4);
    sensitive << ( p_Val2_6_reg_108 );
    sensitive << ( index_assign_3_cast_fu_270_p1 );
    sensitive << ( p_Repl2_2_fu_281_p1 );

    SC_METHOD(thread_p_Result_s_fu_229_p4);
    sensitive << ( p_Val2_4_reg_86 );
    sensitive << ( bvh_d_index_fu_201_p1 );
    sensitive << ( val_assign_cast_fu_225_p1 );

    SC_METHOD(thread_p_shl1_cast_fu_157_p1);
    sensitive << ( tmp_33_fu_149_p3 );

    SC_METHOD(thread_p_shl_cast_fu_145_p1);
    sensitive << ( tmp_32_fu_137_p3 );

    SC_METHOD(thread_pol_read_read_fu_56_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( pol );

    SC_METHOD(thread_tmpTmpData_V_fu_239_p2);
    sensitive << ( p_Val2_4_reg_86 );

    SC_METHOD(thread_tmp_32_fu_137_p3);
    sensitive << ( glPLActiveSliceIdx_V );

    SC_METHOD(thread_tmp_33_fu_149_p3);
    sensitive << ( glPLActiveSliceIdx_V );

    SC_METHOD(thread_tmp_34_fu_161_p2);
    sensitive << ( p_shl_cast_fu_145_p1 );
    sensitive << ( p_shl1_cast_fu_157_p1 );

    SC_METHOD(thread_tmp_35_fu_167_p2);
    sensitive << ( tmp_fu_129_p1 );
    sensitive << ( tmp_34_fu_161_p2 );

    SC_METHOD(thread_tmp_36_fu_178_p1);
    sensitive << ( y );

    SC_METHOD(thread_tmp_39_fu_274_p3);
    sensitive << ( tmpTmpData_V_reg_334 );
    sensitive << ( bvh_d_index_4_fu_257_p1 );

    SC_METHOD(thread_tmp_41_cast_fu_173_p1);
    sensitive << ( tmp_35_fu_167_p2 );

    SC_METHOD(thread_tmp_fu_129_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_s_fu_182_p3);
    sensitive << ( tmp_36_reg_304 );

    SC_METHOD(thread_val_assign_cast_fu_225_p1);
    sensitive << ( p_Repl2_s_fu_218_p3 );

    SC_METHOD(thread_yIndex_2_fu_195_p2);
    sensitive << ( yIndex_reg_97 );

    SC_METHOD(thread_yIndex_3_fu_251_p2);
    sensitive << ( yIndex1_reg_118 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( pol_read_read_fu_56_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_189_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_245_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "accumulateHW_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, pol, "(port)pol");
    sc_trace(mVcdFile, glPLActiveSliceIdx_V, "(port)glPLActiveSliceIdx_V");
    sc_trace(mVcdFile, glPLSlices_V_address0, "(port)glPLSlices_V_address0");
    sc_trace(mVcdFile, glPLSlices_V_ce0, "(port)glPLSlices_V_ce0");
    sc_trace(mVcdFile, glPLSlices_V_we0, "(port)glPLSlices_V_we0");
    sc_trace(mVcdFile, glPLSlices_V_d0, "(port)glPLSlices_V_d0");
    sc_trace(mVcdFile, glPLSlices_V_q0, "(port)glPLSlices_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, pol_read_read_fu_56_p2, "pol_read_read_fu_56_p2");
    sc_trace(mVcdFile, glPLSlices_V_addr_reg_299, "glPLSlices_V_addr_reg_299");
    sc_trace(mVcdFile, tmp_36_fu_178_p1, "tmp_36_fu_178_p1");
    sc_trace(mVcdFile, tmp_36_reg_304, "tmp_36_reg_304");
    sc_trace(mVcdFile, tmpData_V_1_reg_309, "tmpData_V_1_reg_309");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_s_fu_182_p3, "tmp_s_fu_182_p3");
    sc_trace(mVcdFile, tmp_s_reg_315, "tmp_s_reg_315");
    sc_trace(mVcdFile, yIndex_2_fu_195_p2, "yIndex_2_fu_195_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, p_Result_s_fu_229_p4, "p_Result_s_fu_229_p4");
    sc_trace(mVcdFile, exitcond3_fu_189_p2, "exitcond3_fu_189_p2");
    sc_trace(mVcdFile, tmpTmpData_V_fu_239_p2, "tmpTmpData_V_fu_239_p2");
    sc_trace(mVcdFile, tmpTmpData_V_reg_334, "tmpTmpData_V_reg_334");
    sc_trace(mVcdFile, yIndex_3_fu_251_p2, "yIndex_3_fu_251_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, p_Result_2_fu_285_p4, "p_Result_2_fu_285_p4");
    sc_trace(mVcdFile, exitcond_fu_245_p2, "exitcond_fu_245_p2");
    sc_trace(mVcdFile, p_Val2_4_reg_86, "p_Val2_4_reg_86");
    sc_trace(mVcdFile, yIndex_reg_97, "yIndex_reg_97");
    sc_trace(mVcdFile, p_Val2_6_reg_108, "p_Val2_6_reg_108");
    sc_trace(mVcdFile, yIndex1_reg_118, "yIndex1_reg_118");
    sc_trace(mVcdFile, tmp_41_cast_fu_173_p1, "tmp_41_cast_fu_173_p1");
    sc_trace(mVcdFile, tmp_32_fu_137_p3, "tmp_32_fu_137_p3");
    sc_trace(mVcdFile, tmp_33_fu_149_p3, "tmp_33_fu_149_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_145_p1, "p_shl_cast_fu_145_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_157_p1, "p_shl1_cast_fu_157_p1");
    sc_trace(mVcdFile, tmp_fu_129_p1, "tmp_fu_129_p1");
    sc_trace(mVcdFile, tmp_34_fu_161_p2, "tmp_34_fu_161_p2");
    sc_trace(mVcdFile, tmp_35_fu_167_p2, "tmp_35_fu_167_p2");
    sc_trace(mVcdFile, index_assign_cast_fu_205_p1, "index_assign_cast_fu_205_p1");
    sc_trace(mVcdFile, bvh_d_index_2_fu_209_p2, "bvh_d_index_2_fu_209_p2");
    sc_trace(mVcdFile, index_assign_2_cast_fu_214_p1, "index_assign_2_cast_fu_214_p1");
    sc_trace(mVcdFile, p_Repl2_s_fu_218_p3, "p_Repl2_s_fu_218_p3");
    sc_trace(mVcdFile, bvh_d_index_fu_201_p1, "bvh_d_index_fu_201_p1");
    sc_trace(mVcdFile, val_assign_cast_fu_225_p1, "val_assign_cast_fu_225_p1");
    sc_trace(mVcdFile, index_assign_4_cast_fu_261_p1, "index_assign_4_cast_fu_261_p1");
    sc_trace(mVcdFile, bvh_d_index_3_fu_265_p2, "bvh_d_index_3_fu_265_p2");
    sc_trace(mVcdFile, bvh_d_index_4_fu_257_p1, "bvh_d_index_4_fu_257_p1");
    sc_trace(mVcdFile, tmp_39_fu_274_p3, "tmp_39_fu_274_p3");
    sc_trace(mVcdFile, index_assign_3_cast_fu_270_p1, "index_assign_3_cast_fu_270_p1");
    sc_trace(mVcdFile, p_Repl2_2_fu_281_p1, "p_Repl2_2_fu_281_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

accumulateHW::~accumulateHW() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void accumulateHW::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_245_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_Val2_6_reg_108 = p_Result_2_fu_285_p4.read();
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_189_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_Val2_6_reg_108 = tmpData_V_1_reg_309.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_245_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        yIndex1_reg_118 = yIndex_3_fu_251_p2.read();
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_189_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        yIndex1_reg_118 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_189_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        yIndex_reg_97 = yIndex_2_fu_195_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        yIndex_reg_97 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        glPLSlices_V_addr_reg_299 =  (sc_lv<10>) (tmp_41_cast_fu_173_p1.read());
        tmp_36_reg_304 = tmp_36_fu_178_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_189_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_Val2_4_reg_86 = p_Result_s_fu_229_p4.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmpData_V_1_reg_309 = glPLSlices_V_q0.read();
        tmp_s_reg_315 = tmp_s_fu_182_p3.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_189_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmpTmpData_V_reg_334 = tmpTmpData_V_fu_239_p2.read();
    }
}

void accumulateHW::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void accumulateHW::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void accumulateHW::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void accumulateHW::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void accumulateHW::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          (esl_seteq<1,1,1>(exitcond_fu_245_p2.read(), ap_const_lv1_1) || 
           esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_0))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void accumulateHW::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void accumulateHW::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         (esl_seteq<1,1,1>(exitcond_fu_245_p2.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_0)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void accumulateHW::thread_bvh_d_index_2_fu_209_p2() {
    bvh_d_index_2_fu_209_p2 = (!index_assign_cast_fu_205_p1.read().is_01() || !tmp_s_reg_315.read().is_01())? sc_lv<17>(): (sc_biguint<17>(index_assign_cast_fu_205_p1.read()) + sc_biguint<17>(tmp_s_reg_315.read()));
}

void accumulateHW::thread_bvh_d_index_3_fu_265_p2() {
    bvh_d_index_3_fu_265_p2 = (!index_assign_4_cast_fu_261_p1.read().is_01() || !tmp_s_reg_315.read().is_01())? sc_lv<17>(): (sc_biguint<17>(index_assign_4_cast_fu_261_p1.read()) + sc_biguint<17>(tmp_s_reg_315.read()));
}

void accumulateHW::thread_bvh_d_index_4_fu_257_p1() {
    bvh_d_index_4_fu_257_p1 = esl_zext<32,3>(yIndex1_reg_118.read());
}

void accumulateHW::thread_bvh_d_index_fu_201_p1() {
    bvh_d_index_fu_201_p1 = esl_zext<32,3>(yIndex_reg_97.read());
}

void accumulateHW::thread_exitcond3_fu_189_p2() {
    exitcond3_fu_189_p2 = (!yIndex_reg_97.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(yIndex_reg_97.read() == ap_const_lv3_4);
}

void accumulateHW::thread_exitcond_fu_245_p2() {
    exitcond_fu_245_p2 = (!yIndex1_reg_118.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(yIndex1_reg_118.read() == ap_const_lv3_4);
}

void accumulateHW::thread_glPLSlices_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        glPLSlices_V_address0 = glPLSlices_V_addr_reg_299.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        glPLSlices_V_address0 =  (sc_lv<10>) (tmp_41_cast_fu_173_p1.read());
    } else {
        glPLSlices_V_address0 = "XXXXXXXXXX";
    }
}

void accumulateHW::thread_glPLSlices_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        glPLSlices_V_ce0 = ap_const_logic_1;
    } else {
        glPLSlices_V_ce0 = ap_const_logic_0;
    }
}

void accumulateHW::thread_glPLSlices_V_d0() {
    glPLSlices_V_d0 = p_Val2_6_reg_108.read();
}

void accumulateHW::thread_glPLSlices_V_we0() {
    if ((esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_245_p2.read(), ap_const_lv1_1))) {
        glPLSlices_V_we0 = ap_const_logic_1;
    } else {
        glPLSlices_V_we0 = ap_const_logic_0;
    }
}

void accumulateHW::thread_index_assign_2_cast_fu_214_p1() {
    index_assign_2_cast_fu_214_p1 = esl_zext<32,17>(bvh_d_index_2_fu_209_p2.read());
}

void accumulateHW::thread_index_assign_3_cast_fu_270_p1() {
    index_assign_3_cast_fu_270_p1 = esl_zext<32,17>(bvh_d_index_3_fu_265_p2.read());
}

void accumulateHW::thread_index_assign_4_cast_fu_261_p1() {
    index_assign_4_cast_fu_261_p1 = esl_zext<17,3>(yIndex1_reg_118.read());
}

void accumulateHW::thread_index_assign_cast_fu_205_p1() {
    index_assign_cast_fu_205_p1 = esl_zext<17,3>(yIndex_reg_97.read());
}

void accumulateHW::thread_p_Repl2_2_fu_281_p1() {
    p_Repl2_2_fu_281_p1 = esl_zext<64,1>(tmp_39_fu_274_p3.read());
}

void accumulateHW::thread_p_Repl2_s_fu_218_p3() {
    p_Repl2_s_fu_218_p3 = (!index_assign_2_cast_fu_214_p1.read().is_01() || sc_biguint<32>(index_assign_2_cast_fu_214_p1.read()).to_uint() >= 720)? sc_lv<1>(): tmpData_V_1_reg_309.read().range(sc_biguint<32>(index_assign_2_cast_fu_214_p1.read()).to_uint(), sc_biguint<32>(index_assign_2_cast_fu_214_p1.read()).to_uint());
}

void accumulateHW::thread_p_Result_2_fu_285_p4() {
    p_Result_2_fu_285_p4 = esl_bitset<720,720,32,64>(p_Val2_6_reg_108.read(), index_assign_3_cast_fu_270_p1.read(), p_Repl2_2_fu_281_p1.read());
}

void accumulateHW::thread_p_Result_s_fu_229_p4() {
    p_Result_s_fu_229_p4 = esl_bitset<4,4,32,64>(p_Val2_4_reg_86.read(), bvh_d_index_fu_201_p1.read(), val_assign_cast_fu_225_p1.read());
}

void accumulateHW::thread_p_shl1_cast_fu_157_p1() {
    p_shl1_cast_fu_157_p1 = esl_zext<11,6>(tmp_33_fu_149_p3.read());
}

void accumulateHW::thread_p_shl_cast_fu_145_p1() {
    p_shl_cast_fu_145_p1 = esl_zext<11,10>(tmp_32_fu_137_p3.read());
}

void accumulateHW::thread_pol_read_read_fu_56_p2() {
    pol_read_read_fu_56_p2 =  (sc_lv<1>) (pol.read());
}

void accumulateHW::thread_tmpTmpData_V_fu_239_p2() {
    tmpTmpData_V_fu_239_p2 = (!p_Val2_4_reg_86.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(p_Val2_4_reg_86.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void accumulateHW::thread_tmp_32_fu_137_p3() {
    tmp_32_fu_137_p3 = esl_concat<2,8>(glPLActiveSliceIdx_V.read(), ap_const_lv8_0);
}

void accumulateHW::thread_tmp_33_fu_149_p3() {
    tmp_33_fu_149_p3 = esl_concat<2,4>(glPLActiveSliceIdx_V.read(), ap_const_lv4_0);
}

void accumulateHW::thread_tmp_34_fu_161_p2() {
    tmp_34_fu_161_p2 = (!p_shl_cast_fu_145_p1.read().is_01() || !p_shl1_cast_fu_157_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_145_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_157_p1.read()));
}

void accumulateHW::thread_tmp_35_fu_167_p2() {
    tmp_35_fu_167_p2 = (!tmp_fu_129_p1.read().is_01() || !tmp_34_fu_161_p2.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_fu_129_p1.read()) + sc_biguint<11>(tmp_34_fu_161_p2.read()));
}

void accumulateHW::thread_tmp_36_fu_178_p1() {
    tmp_36_fu_178_p1 = y.read().range(15-1, 0);
}

void accumulateHW::thread_tmp_39_fu_274_p3() {
    tmp_39_fu_274_p3 = (!bvh_d_index_4_fu_257_p1.read().is_01() || sc_biguint<32>(bvh_d_index_4_fu_257_p1.read()).to_uint() >= 4)? sc_lv<1>(): tmpTmpData_V_reg_334.read().range(sc_biguint<32>(bvh_d_index_4_fu_257_p1.read()).to_uint(), sc_biguint<32>(bvh_d_index_4_fu_257_p1.read()).to_uint());
}

void accumulateHW::thread_tmp_41_cast_fu_173_p1() {
    tmp_41_cast_fu_173_p1 = esl_sext<64,11>(tmp_35_fu_167_p2.read());
}

void accumulateHW::thread_tmp_fu_129_p1() {
    tmp_fu_129_p1 = x.read().range(11-1, 0);
}

void accumulateHW::thread_tmp_s_fu_182_p3() {
    tmp_s_fu_182_p3 = esl_concat<15,2>(tmp_36_reg_304.read(), ap_const_lv2_0);
}

void accumulateHW::thread_val_assign_cast_fu_225_p1() {
    val_assign_cast_fu_225_p1 = esl_zext<64,1>(p_Repl2_s_fu_218_p3.read());
}

void accumulateHW::thread_yIndex_2_fu_195_p2() {
    yIndex_2_fu_195_p2 = (!yIndex_reg_97.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(yIndex_reg_97.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void accumulateHW::thread_yIndex_3_fu_251_p2() {
    yIndex_3_fu_251_p2 = (!yIndex1_reg_118.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(yIndex1_reg_118.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void accumulateHW::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond3_fu_189_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && (esl_seteq<1,1,1>(exitcond_fu_245_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(pol_read_read_fu_56_p2.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _accumulateHW_HH_
#define _accumulateHW_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct accumulateHW : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > x;
    sc_in< sc_lv<16> > y;
    sc_in< sc_logic > pol;
    sc_in< sc_lv<2> > glPLActiveSliceIdx_V;
    sc_out< sc_lv<10> > glPLSlices_V_address0;
    sc_out< sc_logic > glPLSlices_V_ce0;
    sc_out< sc_logic > glPLSlices_V_we0;
    sc_out< sc_lv<720> > glPLSlices_V_d0;
    sc_in< sc_lv<720> > glPLSlices_V_q0;


    // Module declarations
    accumulateHW(sc_module_name name);
    SC_HAS_PROCESS(accumulateHW);

    ~accumulateHW();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > pol_read_read_fu_56_p2;
    sc_signal< sc_lv<10> > glPLSlices_V_addr_reg_299;
    sc_signal< sc_lv<15> > tmp_36_fu_178_p1;
    sc_signal< sc_lv<15> > tmp_36_reg_304;
    sc_signal< sc_lv<720> > tmpData_V_1_reg_309;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<17> > tmp_s_fu_182_p3;
    sc_signal< sc_lv<17> > tmp_s_reg_315;
    sc_signal< sc_lv<3> > yIndex_2_fu_195_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > p_Result_s_fu_229_p4;
    sc_signal< sc_lv<1> > exitcond3_fu_189_p2;
    sc_signal< sc_lv<4> > tmpTmpData_V_fu_239_p2;
    sc_signal< sc_lv<4> > tmpTmpData_V_reg_334;
    sc_signal< sc_lv<3> > yIndex_3_fu_251_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<720> > p_Result_2_fu_285_p4;
    sc_signal< sc_lv<1> > exitcond_fu_245_p2;
    sc_signal< sc_lv<4> > p_Val2_4_reg_86;
    sc_signal< sc_lv<3> > yIndex_reg_97;
    sc_signal< sc_lv<720> > p_Val2_6_reg_108;
    sc_signal< sc_lv<3> > yIndex1_reg_118;
    sc_signal< sc_lv<64> > tmp_41_cast_fu_173_p1;
    sc_signal< sc_lv<10> > tmp_32_fu_137_p3;
    sc_signal< sc_lv<6> > tmp_33_fu_149_p3;
    sc_signal< sc_lv<11> > p_shl_cast_fu_145_p1;
    sc_signal< sc_lv<11> > p_shl1_cast_fu_157_p1;
    sc_signal< sc_lv<11> > tmp_fu_129_p1;
    sc_signal< sc_lv<11> > tmp_34_fu_161_p2;
    sc_signal< sc_lv<11> > tmp_35_fu_167_p2;
    sc_signal< sc_lv<17> > index_assign_cast_fu_205_p1;
    sc_signal< sc_lv<17> > bvh_d_index_2_fu_209_p2;
    sc_signal< sc_lv<32> > index_assign_2_cast_fu_214_p1;
    sc_signal< sc_lv<1> > p_Repl2_s_fu_218_p3;
    sc_signal< sc_lv<32> > bvh_d_index_fu_201_p1;
    sc_signal< sc_lv<64> > val_assign_cast_fu_225_p1;
    sc_signal< sc_lv<17> > index_assign_4_cast_fu_261_p1;
    sc_signal< sc_lv<17> > bvh_d_index_3_fu_265_p2;
    sc_signal< sc_lv<32> > bvh_d_index_4_fu_257_p1;
    sc_signal< sc_lv<1> > tmp_39_fu_274_p3;
    sc_signal< sc_lv<32> > index_assign_3_cast_fu_270_p1;
    sc_signal< sc_lv<64> > p_Repl2_2_fu_281_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bvh_d_index_2_fu_209_p2();
    void thread_bvh_d_index_3_fu_265_p2();
    void thread_bvh_d_index_4_fu_257_p1();
    void thread_bvh_d_index_fu_201_p1();
    void thread_exitcond3_fu_189_p2();
    void thread_exitcond_fu_245_p2();
    void thread_glPLSlices_V_address0();
    void thread_glPLSlices_V_ce0();
    void thread_glPLSlices_V_d0();
    void thread_glPLSlices_V_we0();
    void thread_index_assign_2_cast_fu_214_p1();
    void thread_index_assign_3_cast_fu_270_p1();
    void thread_index_assign_4_cast_fu_261_p1();
    void thread_index_assign_cast_fu_205_p1();
    void thread_p_Repl2_2_fu_281_p1();
    void thread_p_Repl2_s_fu_218_p3();
    void thread_p_Result_2_fu_285_p4();
    void thread_p_Result_s_fu_229_p4();
    void thread_p_shl1_cast_fu_157_p1();
    void thread_p_shl_cast_fu_145_p1();
    void thread_pol_read_read_fu_56_p2();
    void thread_tmpTmpData_V_fu_239_p2();
    void thread_tmp_32_fu_137_p3();
    void thread_tmp_33_fu_149_p3();
    void thread_tmp_34_fu_161_p2();
    void thread_tmp_35_fu_167_p2();
    void thread_tmp_36_fu_178_p1();
    void thread_tmp_39_fu_274_p3();
    void thread_tmp_41_cast_fu_173_p1();
    void thread_tmp_fu_129_p1();
    void thread_tmp_s_fu_182_p3();
    void thread_val_assign_cast_fu_225_p1();
    void thread_yIndex_2_fu_195_p2();
    void thread_yIndex_3_fu_251_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eventStreamToConstEncntFrameStream,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=9.671000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=228,HLS_SYN_DSP=0,HLS_SYN_FF=498,HLS_SYN_LUT=1080}" *)

module eventStreamToConstEncntFrameStream (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        frameStream_TREADY,
        xStream_V_V_TDATA,
        xStream_V_V_TVALID,
        xStream_V_V_TREADY,
        yStream_V_V_TDATA,
        yStream_V_V_TVALID,
        yStream_V_V_TREADY,
        count_V,
        count_V_ap_vld,
        vgaEn_V,
        vgaEn_V_ap_vld,
        vCnt_V,
        vCnt_V_ap_vld,
        hCnt_V,
        hCnt_V_ap_vld,
        regX_V,
        regX_V_ap_vld,
        regY_V,
        regY_V_ap_vld,
        frameStream_TDATA,
        frameStream_TVALID,
        frameStream_TKEEP,
        frameStream_TSTRB,
        frameStream_TUSER,
        frameStream_TLAST,
        frameStream_TID,
        frameStream_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   frameStream_TREADY;
input  [15:0] xStream_V_V_TDATA;
input   xStream_V_V_TVALID;
output   xStream_V_V_TREADY;
input  [15:0] yStream_V_V_TDATA;
input   yStream_V_V_TVALID;
output   yStream_V_V_TREADY;
output  [63:0] count_V;
output   count_V_ap_vld;
output  [0:0] vgaEn_V;
output   vgaEn_V_ap_vld;
output  [15:0] vCnt_V;
output   vCnt_V_ap_vld;
output  [15:0] hCnt_V;
output   hCnt_V_ap_vld;
output  [15:0] regX_V;
output   regX_V_ap_vld;
output  [15:0] regY_V;
output   regY_V_ap_vld;
output  [23:0] frameStream_TDATA;
output   frameStream_TVALID;
output  [2:0] frameStream_TKEEP;
output  [2:0] frameStream_TSTRB;
output  [1:0] frameStream_TUSER;
output  [0:0] frameStream_TLAST;
output  [0:0] frameStream_TID;
output  [0:0] frameStream_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xStream_V_V_TREADY;
reg yStream_V_V_TREADY;
reg count_V_ap_vld;
reg vgaEn_V_ap_vld;
reg vCnt_V_ap_vld;
reg hCnt_V_ap_vld;
reg regX_V_ap_vld;
reg regY_V_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    frameStream_V_data_V_1_ack_in;
reg   [0:0] vgaOutputEn_load_reg_2194;
reg    ap_block_state2_io;
wire    frameStream_V_keep_V_1_ack_in;
wire    frameStream_V_strb_V_1_ack_in;
wire    frameStream_V_user_V_1_ack_in;
wire    frameStream_V_last_V_1_ack_in;
wire    frameStream_V_id_V_1_ack_in;
wire    frameStream_V_dest_V_1_ack_in;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] vgaOutputEn_load_reg_2194_pp0_iter1_reg;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [23:0] frameStream_V_data_V_1_data_out;
reg    frameStream_V_data_V_1_vld_in;
wire    frameStream_V_data_V_1_vld_out;
wire    frameStream_V_data_V_1_ack_out;
reg   [23:0] frameStream_V_data_V_1_payload_A;
reg   [23:0] frameStream_V_data_V_1_payload_B;
reg    frameStream_V_data_V_1_sel_rd;
reg    frameStream_V_data_V_1_sel_wr;
wire    frameStream_V_data_V_1_sel;
wire    frameStream_V_data_V_1_load_A;
wire    frameStream_V_data_V_1_load_B;
reg   [1:0] frameStream_V_data_V_1_state;
wire    frameStream_V_data_V_1_state_cmp_full;
wire   [2:0] frameStream_V_keep_V_1_data_out;
reg    frameStream_V_keep_V_1_vld_in;
wire    frameStream_V_keep_V_1_vld_out;
wire    frameStream_V_keep_V_1_ack_out;
reg    frameStream_V_keep_V_1_sel_rd;
wire    frameStream_V_keep_V_1_sel;
reg   [1:0] frameStream_V_keep_V_1_state;
wire   [2:0] frameStream_V_strb_V_1_data_out;
reg    frameStream_V_strb_V_1_vld_in;
wire    frameStream_V_strb_V_1_vld_out;
wire    frameStream_V_strb_V_1_ack_out;
reg    frameStream_V_strb_V_1_sel_rd;
wire    frameStream_V_strb_V_1_sel;
reg   [1:0] frameStream_V_strb_V_1_state;
reg   [1:0] frameStream_V_user_V_1_data_out;
reg    frameStream_V_user_V_1_vld_in;
wire    frameStream_V_user_V_1_vld_out;
wire    frameStream_V_user_V_1_ack_out;
reg   [1:0] frameStream_V_user_V_1_payload_A;
reg   [1:0] frameStream_V_user_V_1_payload_B;
reg    frameStream_V_user_V_1_sel_rd;
reg    frameStream_V_user_V_1_sel_wr;
wire    frameStream_V_user_V_1_sel;
wire    frameStream_V_user_V_1_load_A;
wire    frameStream_V_user_V_1_load_B;
reg   [1:0] frameStream_V_user_V_1_state;
wire    frameStream_V_user_V_1_state_cmp_full;
reg   [0:0] frameStream_V_last_V_1_data_out;
reg    frameStream_V_last_V_1_vld_in;
wire    frameStream_V_last_V_1_vld_out;
wire    frameStream_V_last_V_1_ack_out;
reg   [0:0] frameStream_V_last_V_1_payload_A;
reg   [0:0] frameStream_V_last_V_1_payload_B;
reg    frameStream_V_last_V_1_sel_rd;
reg    frameStream_V_last_V_1_sel_wr;
wire    frameStream_V_last_V_1_sel;
wire    frameStream_V_last_V_1_load_A;
wire    frameStream_V_last_V_1_load_B;
reg   [1:0] frameStream_V_last_V_1_state;
wire    frameStream_V_last_V_1_state_cmp_full;
wire   [0:0] frameStream_V_id_V_1_data_out;
reg    frameStream_V_id_V_1_vld_in;
wire    frameStream_V_id_V_1_vld_out;
wire    frameStream_V_id_V_1_ack_out;
reg    frameStream_V_id_V_1_sel_rd;
wire    frameStream_V_id_V_1_sel;
reg   [1:0] frameStream_V_id_V_1_state;
wire   [0:0] frameStream_V_dest_V_1_data_out;
reg    frameStream_V_dest_V_1_vld_in;
wire    frameStream_V_dest_V_1_vld_out;
wire    frameStream_V_dest_V_1_ack_out;
reg    frameStream_V_dest_V_1_sel_rd;
wire    frameStream_V_dest_V_1_sel;
reg   [1:0] frameStream_V_dest_V_1_state;
reg   [0:0] currentStoreSliceIdx;
reg   [11:0] hCntReg_V;
reg   [11:0] vCntReg_V;
reg   [11:0] glDVSSlice_V_0_address0;
reg    glDVSSlice_V_0_ce0;
wire   [511:0] glDVSSlice_V_0_q0;
reg   [11:0] glDVSSlice_V_0_address1;
reg    glDVSSlice_V_0_ce1;
reg    glDVSSlice_V_0_we1;
reg   [511:0] glDVSSlice_V_0_d1;
reg   [11:0] glDVSSlice_V_1_address0;
reg    glDVSSlice_V_1_ce0;
wire   [511:0] glDVSSlice_V_1_q0;
reg   [11:0] glDVSSlice_V_1_address1;
reg    glDVSSlice_V_1_ce1;
reg    glDVSSlice_V_1_we1;
reg   [511:0] glDVSSlice_V_1_d1;
reg   [0:0] vgaOutputEn;
reg   [63:0] cntReg_V;
reg   [15:0] startX_V;
reg   [15:0] startY_V;
reg   [63:0] evCntReg_V;
reg    frameStream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [15:0] p_0583_1_reg_319;
reg   [15:0] p_0583_1_reg_319_pp0_iter1_reg;
reg   [11:0] hCntReg_V_load_3_reg_374;
reg   [11:0] hCntReg_V_load_3_reg_374_pp0_iter1_reg;
reg   [11:0] vCntReg_V_load_3_reg_387;
reg   [11:0] vCntReg_V_load_3_reg_387_pp0_iter1_reg;
reg   [0:0] skipFlag_reg_435;
reg   [15:0] tmp_V_reg_2141;
reg   [15:0] tmp_V_reg_2141_pp0_iter1_reg;
wire   [0:0] currentStoreSliceIdx_1_load_fu_508_p1;
reg   [0:0] currentStoreSliceIdx_1_reg_2149;
reg   [11:0] glDVSSlice_V_0_addr_1_reg_2153;
reg   [11:0] glDVSSlice_V_1_addr_reg_2159;
reg   [11:0] vCntReg_V_load_reg_2165;
reg   [11:0] glDVSSlice_V_1_addr_1_reg_2172;
wire   [0:0] grp_fu_480_p2;
reg   [0:0] tmp_33_reg_2178;
reg   [11:0] glDVSSlice_V_0_addr_reg_2183;
reg   [0:0] tmp_20_reg_2189;
wire   [0:0] vgaOutputEn_load_load_fu_611_p1;
wire   [0:0] tmp_last_V_fu_616_p2;
reg   [0:0] tmp_last_V_reg_2198;
wire   [0:0] tmp_60_fu_628_p2;
reg   [0:0] tmp_60_reg_2204;
wire   [19:0] r_V_1_fu_680_p1;
reg   [19:0] r_V_1_reg_2212;
reg   [19:0] r_V_1_reg_2212_pp0_iter1_reg;
wire   [0:0] tmp_66_fu_684_p2;
reg   [0:0] tmp_66_reg_2217;
reg   [0:0] tmp_66_reg_2217_pp0_iter1_reg;
wire   [23:0] pixVal_V_fu_2032_p3;
wire   [1:0] tmp_user_V_fu_2040_p3;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] ap_phi_mux_p_0583_s_phi_fu_312_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_p_0583_s_reg_309;
wire   [0:0] empty_n_1_fu_498_p1;
wire   [0:0] empty_n_fu_490_p1;
reg   [15:0] ap_phi_mux_p_0583_1_phi_fu_323_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_p_0583_1_reg_319;
reg   [0:0] ap_phi_mux_hCntReg_V_flag_phi_fu_334_p6;
wire   [0:0] ap_phi_reg_pp0_iter0_hCntReg_V_flag_reg_331;
wire   [0:0] tmp_62_fu_641_p2;
reg   [0:0] ap_phi_mux_vCntReg_V_flag_phi_fu_349_p6;
wire   [0:0] ap_phi_reg_pp0_iter0_vCntReg_V_flag_reg_346;
reg   [0:0] ap_phi_mux_vgaOutputEn_flag_phi_fu_364_p6;
wire   [0:0] ap_phi_reg_pp0_iter0_vgaOutputEn_flag_reg_361;
wire   [0:0] tmp_64_fu_653_p2;
reg   [11:0] ap_phi_mux_hCntReg_V_load_3_phi_fu_377_p6;
wire   [11:0] tmp_61_fu_634_p2;
wire   [11:0] ap_phi_reg_pp0_iter0_hCntReg_V_load_3_reg_374;
reg   [11:0] ap_phi_mux_vCntReg_V_load_3_phi_fu_390_p6;
wire   [11:0] ap_phi_reg_pp0_iter0_vCntReg_V_load_3_reg_387;
wire   [11:0] p_tmp_1_fu_660_p3;
reg   [0:0] ap_phi_mux_val_assign_s_phi_fu_402_p6;
wire   [0:0] ap_phi_reg_pp0_iter0_val_assign_s_reg_399;
wire   [0:0] not_tmp_s_fu_669_p2;
reg   [0:0] ap_phi_mux_vgaOutputEn_flag_1_phi_fu_415_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_vgaOutputEn_flag_1_reg_412;
reg   [0:0] ap_phi_mux_vgaOutputEn_new_1_phi_fu_427_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_vgaOutputEn_new_1_reg_424;
wire   [0:0] ap_phi_reg_pp0_iter0_skipFlag_reg_435;
reg   [0:0] ap_phi_reg_pp0_iter1_skipFlag_reg_435;
reg   [7:0] ap_phi_mux_p_0568_2_phi_fu_452_p4;
wire   [7:0] p_2_fu_1285_p3;
wire   [7:0] ap_phi_reg_pp0_iter1_p_0568_2_reg_449;
wire   [7:0] p_0568_1_fu_1934_p3;
wire   [0:0] ap_phi_reg_pp0_iter0_val_assign_reg_458;
reg   [0:0] ap_phi_reg_pp0_iter1_val_assign_reg_458;
reg   [0:0] ap_phi_reg_pp0_iter2_val_assign_reg_458;
wire   [63:0] tmp_28_cast_fu_546_p1;
wire   [63:0] tmp_93_cast_fu_583_p1;
wire   [63:0] tmp_90_cast_fu_606_p1;
wire   [0:0] p_s_fu_512_p2;
wire   [63:0] tmp_71_fu_708_p2;
wire   [15:0] p_tmp_s_fu_2064_p3;
wire   [15:0] storemerge1_fu_2094_p3;
wire   [63:0] tmp_72_fu_2112_p2;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_count_V_dummy_ack;
reg    ap_reg_ioackin_vgaEn_V_dummy_ack;
reg    ap_reg_ioackin_vCnt_V_dummy_ack;
reg    ap_reg_ioackin_hCnt_V_dummy_ack;
reg    ap_reg_ioackin_regX_V_dummy_ack;
reg    ap_reg_ioackin_regY_V_dummy_ack;
reg   [511:0] tmp_122_fu_1086_p4;
reg   [511:0] tmp_97_fu_2013_p4;
reg   [511:0] tmp_140_fu_1364_p4;
reg   [511:0] tmp_43_fu_1735_p4;
wire   [4:0] tmp_3_fu_522_p4;
wire   [13:0] tmp_fu_518_p1;
wire   [13:0] tmp_18_cast_fu_532_p3;
wire   [13:0] tmp_6_fu_540_p2;
wire   [4:0] grp_fu_471_p4;
wire   [13:0] tmp_26_cast_fu_565_p1;
wire   [13:0] tmp_92_cast_fu_569_p3;
wire   [13:0] tmp_93_fu_577_p2;
wire   [13:0] tmp_11_cast_fu_588_p1;
wire   [13:0] tmp_89_cast_fu_592_p3;
wire   [13:0] tmp_47_fu_600_p2;
wire   [11:0] tmp_59_fu_622_p2;
wire   [11:0] tmp_63_fu_647_p2;
wire   [5:0] tmp_98_fu_726_p1;
wire   [8:0] tmp_73_fu_730_p3;
wire   [31:0] index_assign_1_fu_738_p1;
wire   [8:0] tmp_74_fu_750_p3;
wire   [31:0] index_assign_10_1_fu_758_p1;
wire   [8:0] tmp_75_fu_770_p3;
wire   [31:0] index_assign_10_2_fu_778_p1;
wire   [8:0] tmp_76_fu_790_p3;
wire   [31:0] index_assign_10_3_fu_798_p1;
wire   [8:0] tmp_77_fu_810_p3;
wire   [31:0] index_assign_10_4_fu_818_p1;
wire   [8:0] tmp_78_fu_830_p3;
wire   [31:0] index_assign_10_5_fu_838_p1;
wire   [8:0] tmp_79_fu_850_p3;
wire   [31:0] index_assign_10_6_fu_858_p1;
wire   [8:0] tmp_80_fu_870_p3;
wire   [31:0] index_assign_10_7_fu_878_p1;
wire   [0:0] tmp_106_fu_882_p3;
wire   [0:0] tmp_105_fu_862_p3;
wire   [0:0] tmp_104_fu_842_p3;
wire   [0:0] tmp_103_fu_822_p3;
wire   [0:0] tmp_102_fu_802_p3;
wire   [0:0] tmp_101_fu_782_p3;
wire   [0:0] tmp_100_fu_762_p3;
wire   [0:0] tmp_99_fu_742_p3;
wire   [7:0] p_Result_53_7_fu_890_p9;
wire   [7:0] tmp_14_fu_910_p2;
wire   [7:0] tmpPixVal_V_fu_916_p3;
wire   [0:0] tmp_107_fu_924_p1;
wire   [63:0] p_Repl2_s_fu_928_p1;
wire   [0:0] tmp_109_fu_942_p3;
reg   [511:0] tmp_108_fu_932_p4;
wire   [63:0] p_Repl2_11_1_fu_950_p1;
wire   [0:0] tmp_111_fu_964_p3;
reg   [511:0] tmp_110_fu_954_p4;
wire   [63:0] p_Repl2_11_2_fu_972_p1;
wire   [0:0] tmp_113_fu_986_p3;
reg   [511:0] tmp_112_fu_976_p4;
wire   [63:0] p_Repl2_11_3_fu_994_p1;
wire   [0:0] tmp_115_fu_1008_p3;
reg   [511:0] tmp_114_fu_998_p4;
wire   [63:0] p_Repl2_11_4_fu_1016_p1;
wire   [0:0] tmp_117_fu_1030_p3;
reg   [511:0] tmp_116_fu_1020_p4;
wire   [63:0] p_Repl2_11_5_fu_1038_p1;
wire   [0:0] tmp_119_fu_1052_p3;
reg   [511:0] tmp_118_fu_1042_p4;
wire   [63:0] p_Repl2_11_6_fu_1060_p1;
wire   [0:0] tmp_121_fu_1074_p3;
reg   [511:0] tmp_120_fu_1064_p4;
wire   [63:0] p_Repl2_11_7_fu_1082_p1;
wire   [0:0] grp_fu_485_p2;
wire   [5:0] tmp_124_fu_1102_p1;
wire   [8:0] tmp_81_fu_1105_p3;
wire   [31:0] index_assign_3_fu_1113_p1;
wire   [8:0] tmp_82_fu_1125_p3;
wire   [31:0] index_assign_14_1_fu_1133_p1;
wire   [8:0] tmp_83_fu_1145_p3;
wire   [31:0] index_assign_14_2_fu_1153_p1;
wire   [8:0] tmp_84_fu_1165_p3;
wire   [31:0] index_assign_14_3_fu_1173_p1;
wire   [8:0] tmp_85_fu_1185_p3;
wire   [31:0] index_assign_14_4_fu_1193_p1;
wire   [8:0] tmp_86_fu_1205_p3;
wire   [31:0] index_assign_14_5_fu_1213_p1;
wire   [8:0] tmp_87_fu_1225_p3;
wire   [31:0] index_assign_14_6_fu_1233_p1;
wire   [8:0] tmp_88_fu_1245_p3;
wire   [31:0] index_assign_14_7_fu_1253_p1;
wire   [0:0] tmp_132_fu_1257_p3;
wire   [0:0] tmp_131_fu_1237_p3;
wire   [0:0] tmp_130_fu_1217_p3;
wire   [0:0] tmp_129_fu_1197_p3;
wire   [0:0] tmp_128_fu_1177_p3;
wire   [0:0] tmp_127_fu_1157_p3;
wire   [0:0] tmp_126_fu_1137_p3;
wire   [0:0] tmp_125_fu_1117_p3;
wire   [0:0] or_cond_fu_1097_p2;
wire   [7:0] p_Result_61_7_fu_1265_p9;
reg   [511:0] tmp_133_fu_1294_p4;
reg   [511:0] tmp_134_fu_1304_p4;
reg   [511:0] tmp_135_fu_1314_p4;
reg   [511:0] tmp_136_fu_1324_p4;
reg   [511:0] tmp_137_fu_1334_p4;
reg   [511:0] tmp_138_fu_1344_p4;
reg   [511:0] tmp_139_fu_1354_p4;
wire   [5:0] tmp_7_fu_1375_p1;
wire   [8:0] tmp_1_fu_1379_p3;
wire   [31:0] index_assign_s_fu_1387_p1;
wire   [8:0] tmp_2_fu_1399_p3;
wire   [31:0] index_assign_18_1_fu_1407_p1;
wire   [8:0] tmp_4_fu_1419_p3;
wire   [31:0] index_assign_18_2_fu_1427_p1;
wire   [8:0] tmp_5_fu_1439_p3;
wire   [31:0] index_assign_18_3_fu_1447_p1;
wire   [8:0] tmp_10_fu_1459_p3;
wire   [31:0] index_assign_18_4_fu_1467_p1;
wire   [8:0] tmp_15_fu_1479_p3;
wire   [31:0] index_assign_18_5_fu_1487_p1;
wire   [8:0] tmp_17_fu_1499_p3;
wire   [31:0] index_assign_18_6_fu_1507_p1;
wire   [8:0] tmp_21_fu_1519_p3;
wire   [31:0] index_assign_18_7_fu_1527_p1;
wire   [0:0] tmp_22_fu_1531_p3;
wire   [0:0] tmp_18_fu_1511_p3;
wire   [0:0] tmp_16_fu_1491_p3;
wire   [0:0] tmp_13_fu_1471_p3;
wire   [0:0] tmp_12_fu_1451_p3;
wire   [0:0] tmp_11_fu_1431_p3;
wire   [0:0] tmp_9_fu_1411_p3;
wire   [0:0] tmp_8_fu_1391_p3;
wire   [7:0] p_Result_69_7_fu_1539_p9;
wire   [7:0] tmp_s_fu_1559_p2;
wire   [7:0] tmpPixVal_V_2_fu_1565_p3;
wire   [0:0] tmp_23_fu_1573_p1;
wire   [63:0] p_Repl2_8_fu_1577_p1;
wire   [0:0] tmp_25_fu_1591_p3;
reg   [511:0] tmp_24_fu_1581_p4;
wire   [63:0] p_Repl2_8_1_fu_1599_p1;
wire   [0:0] tmp_27_fu_1613_p3;
reg   [511:0] tmp_26_fu_1603_p4;
wire   [63:0] p_Repl2_8_2_fu_1621_p1;
wire   [0:0] tmp_29_fu_1635_p3;
reg   [511:0] tmp_28_fu_1625_p4;
wire   [63:0] p_Repl2_8_3_fu_1643_p1;
wire   [0:0] tmp_32_fu_1657_p3;
reg   [511:0] tmp_31_fu_1647_p4;
wire   [63:0] p_Repl2_8_4_fu_1665_p1;
wire   [0:0] tmp_36_fu_1679_p3;
reg   [511:0] tmp_34_fu_1669_p4;
wire   [63:0] p_Repl2_8_5_fu_1687_p1;
wire   [0:0] tmp_40_fu_1701_p3;
reg   [511:0] tmp_37_fu_1691_p4;
wire   [63:0] p_Repl2_8_6_fu_1709_p1;
wire   [0:0] tmp_42_fu_1723_p3;
reg   [511:0] tmp_41_fu_1713_p4;
wire   [63:0] p_Repl2_8_7_fu_1731_p1;
wire   [5:0] tmp_50_fu_1751_p1;
wire   [8:0] tmp_35_fu_1754_p3;
wire   [31:0] index_assign_2_fu_1762_p1;
wire   [8:0] tmp_38_fu_1774_p3;
wire   [31:0] index_assign_22_1_fu_1782_p1;
wire   [8:0] tmp_39_fu_1794_p3;
wire   [31:0] index_assign_22_2_fu_1802_p1;
wire   [8:0] tmp_45_fu_1814_p3;
wire   [31:0] index_assign_22_3_fu_1822_p1;
wire   [8:0] tmp_46_fu_1834_p3;
wire   [31:0] index_assign_22_4_fu_1842_p1;
wire   [8:0] tmp_48_fu_1854_p3;
wire   [31:0] index_assign_22_5_fu_1862_p1;
wire   [8:0] tmp_49_fu_1874_p3;
wire   [31:0] index_assign_22_6_fu_1882_p1;
wire   [8:0] tmp_58_fu_1894_p3;
wire   [31:0] index_assign_22_7_fu_1902_p1;
wire   [0:0] tmp_65_fu_1906_p3;
wire   [0:0] tmp_57_fu_1886_p3;
wire   [0:0] tmp_56_fu_1866_p3;
wire   [0:0] tmp_55_fu_1846_p3;
wire   [0:0] tmp_54_fu_1826_p3;
wire   [0:0] tmp_53_fu_1806_p3;
wire   [0:0] tmp_52_fu_1786_p3;
wire   [0:0] tmp_51_fu_1766_p3;
wire   [0:0] or_cond1_fu_1746_p2;
wire   [7:0] p_Result_77_7_fu_1914_p9;
reg   [511:0] tmp_89_fu_1943_p4;
reg   [511:0] tmp_90_fu_1953_p4;
reg   [511:0] tmp_91_fu_1963_p4;
reg   [511:0] tmp_92_fu_1973_p4;
reg   [511:0] tmp_94_fu_1983_p4;
reg   [511:0] tmp_95_fu_1993_p4;
reg   [511:0] tmp_96_fu_2003_p4;
wire   [23:0] r_V_fu_2024_p3;
wire   [0:0] tmp_67_fu_2052_p2;
wire   [15:0] tmp_68_fu_2058_p2;
wire   [0:0] tmp_69_fu_2082_p2;
wire   [15:0] tmp_70_fu_2088_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_639;
reg    ap_condition_540;
reg    ap_condition_90;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 frameStream_V_data_V_1_sel_rd = 1'b0;
#0 frameStream_V_data_V_1_sel_wr = 1'b0;
#0 frameStream_V_data_V_1_state = 2'd0;
#0 frameStream_V_keep_V_1_sel_rd = 1'b0;
#0 frameStream_V_keep_V_1_state = 2'd0;
#0 frameStream_V_strb_V_1_sel_rd = 1'b0;
#0 frameStream_V_strb_V_1_state = 2'd0;
#0 frameStream_V_user_V_1_sel_rd = 1'b0;
#0 frameStream_V_user_V_1_sel_wr = 1'b0;
#0 frameStream_V_user_V_1_state = 2'd0;
#0 frameStream_V_last_V_1_sel_rd = 1'b0;
#0 frameStream_V_last_V_1_sel_wr = 1'b0;
#0 frameStream_V_last_V_1_state = 2'd0;
#0 frameStream_V_id_V_1_sel_rd = 1'b0;
#0 frameStream_V_id_V_1_state = 2'd0;
#0 frameStream_V_dest_V_1_sel_rd = 1'b0;
#0 frameStream_V_dest_V_1_state = 2'd0;
#0 currentStoreSliceIdx = 1'd0;
#0 hCntReg_V = 12'd0;
#0 vCntReg_V = 12'd0;
#0 vgaOutputEn = 1'd0;
#0 cntReg_V = 64'd0;
#0 startX_V = 16'd0;
#0 startY_V = 16'd0;
#0 evCntReg_V = 64'd0;
#0 ap_reg_ioackin_count_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_vgaEn_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_vCnt_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_hCnt_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_regX_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_regY_V_dummy_ack = 1'b0;
end

eventStreamToConsbkb #(
    .DataWidth( 512 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
glDVSSlice_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(glDVSSlice_V_0_address0),
    .ce0(glDVSSlice_V_0_ce0),
    .q0(glDVSSlice_V_0_q0),
    .address1(glDVSSlice_V_0_address1),
    .ce1(glDVSSlice_V_0_ce1),
    .we1(glDVSSlice_V_0_we1),
    .d1(glDVSSlice_V_0_d1)
);

eventStreamToConsbkb #(
    .DataWidth( 512 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
glDVSSlice_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(glDVSSlice_V_1_address0),
    .ce0(glDVSSlice_V_1_ce0),
    .q0(glDVSSlice_V_1_q0),
    .address1(glDVSSlice_V_1_address1),
    .ce1(glDVSSlice_V_1_ce1),
    .we1(glDVSSlice_V_1_we1),
    .d1(glDVSSlice_V_1_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_count_V_dummy_ack <= 1'b0;
    end else begin
        if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_count_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_count_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_hCnt_V_dummy_ack <= 1'b0;
    end else begin
        if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_hCnt_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_hCnt_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_regX_V_dummy_ack <= 1'b0;
    end else begin
        if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_regX_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_regX_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_regY_V_dummy_ack <= 1'b0;
    end else begin
        if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_regY_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_regY_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_vCnt_V_dummy_ack <= 1'b0;
    end else begin
        if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_vCnt_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_vCnt_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_vgaEn_V_dummy_ack <= 1'b0;
    end else begin
        if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_vgaEn_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_vgaEn_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((frameStream_V_data_V_1_ack_out == 1'b1) & (frameStream_V_data_V_1_vld_out == 1'b1))) begin
            frameStream_V_data_V_1_sel_rd <= ~frameStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((frameStream_V_data_V_1_ack_in == 1'b1) & (frameStream_V_data_V_1_vld_in == 1'b1))) begin
            frameStream_V_data_V_1_sel_wr <= ~frameStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((frameStream_V_data_V_1_vld_in == 1'b0) & (frameStream_V_data_V_1_state == 2'd2)) | ((frameStream_V_data_V_1_vld_in == 1'b0) & (frameStream_V_data_V_1_ack_out == 1'b1) & (frameStream_V_data_V_1_state == 2'd3)))) begin
            frameStream_V_data_V_1_state <= 2'd2;
        end else if ((((frameStream_V_data_V_1_ack_out == 1'b0) & (frameStream_V_data_V_1_state == 2'd1)) | ((frameStream_V_data_V_1_ack_out == 1'b0) & (frameStream_V_data_V_1_vld_in == 1'b1) & (frameStream_V_data_V_1_state == 2'd3)))) begin
            frameStream_V_data_V_1_state <= 2'd1;
        end else if (((~((frameStream_V_data_V_1_vld_in == 1'b0) & (frameStream_V_data_V_1_ack_out == 1'b1)) & ~((frameStream_V_data_V_1_ack_out == 1'b0) & (frameStream_V_data_V_1_vld_in == 1'b1)) & (frameStream_V_data_V_1_state == 2'd3)) | ((frameStream_V_data_V_1_ack_out == 1'b1) & (frameStream_V_data_V_1_state == 2'd1)) | ((frameStream_V_data_V_1_vld_in == 1'b1) & (frameStream_V_data_V_1_state == 2'd2)))) begin
            frameStream_V_data_V_1_state <= 2'd3;
        end else begin
            frameStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((frameStream_V_dest_V_1_ack_out == 1'b1) & (frameStream_V_dest_V_1_vld_out == 1'b1))) begin
            frameStream_V_dest_V_1_sel_rd <= ~frameStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((frameStream_V_dest_V_1_vld_in == 1'b0) & (frameStream_V_dest_V_1_state == 2'd2)) | ((frameStream_V_dest_V_1_vld_in == 1'b0) & (frameStream_V_dest_V_1_ack_out == 1'b1) & (frameStream_V_dest_V_1_state == 2'd3)))) begin
            frameStream_V_dest_V_1_state <= 2'd2;
        end else if ((((frameStream_V_dest_V_1_ack_out == 1'b0) & (frameStream_V_dest_V_1_state == 2'd1)) | ((frameStream_V_dest_V_1_ack_out == 1'b0) & (frameStream_V_dest_V_1_vld_in == 1'b1) & (frameStream_V_dest_V_1_state == 2'd3)))) begin
            frameStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((frameStream_V_dest_V_1_vld_in == 1'b0) & (frameStream_V_dest_V_1_ack_out == 1'b1)) & ~((frameStream_V_dest_V_1_ack_out == 1'b0) & (frameStream_V_dest_V_1_vld_in == 1'b1)) & (frameStream_V_dest_V_1_state == 2'd3)) | ((frameStream_V_dest_V_1_ack_out == 1'b1) & (frameStream_V_dest_V_1_state == 2'd1)) | ((frameStream_V_dest_V_1_vld_in == 1'b1) & (frameStream_V_dest_V_1_state == 2'd2)))) begin
            frameStream_V_dest_V_1_state <= 2'd3;
        end else begin
            frameStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((frameStream_V_id_V_1_ack_out == 1'b1) & (frameStream_V_id_V_1_vld_out == 1'b1))) begin
            frameStream_V_id_V_1_sel_rd <= ~frameStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((frameStream_V_id_V_1_vld_in == 1'b0) & (frameStream_V_id_V_1_state == 2'd2)) | ((frameStream_V_id_V_1_vld_in == 1'b0) & (frameStream_V_id_V_1_ack_out == 1'b1) & (frameStream_V_id_V_1_state == 2'd3)))) begin
            frameStream_V_id_V_1_state <= 2'd2;
        end else if ((((frameStream_V_id_V_1_ack_out == 1'b0) & (frameStream_V_id_V_1_state == 2'd1)) | ((frameStream_V_id_V_1_ack_out == 1'b0) & (frameStream_V_id_V_1_vld_in == 1'b1) & (frameStream_V_id_V_1_state == 2'd3)))) begin
            frameStream_V_id_V_1_state <= 2'd1;
        end else if (((~((frameStream_V_id_V_1_vld_in == 1'b0) & (frameStream_V_id_V_1_ack_out == 1'b1)) & ~((frameStream_V_id_V_1_ack_out == 1'b0) & (frameStream_V_id_V_1_vld_in == 1'b1)) & (frameStream_V_id_V_1_state == 2'd3)) | ((frameStream_V_id_V_1_ack_out == 1'b1) & (frameStream_V_id_V_1_state == 2'd1)) | ((frameStream_V_id_V_1_vld_in == 1'b1) & (frameStream_V_id_V_1_state == 2'd2)))) begin
            frameStream_V_id_V_1_state <= 2'd3;
        end else begin
            frameStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((frameStream_V_keep_V_1_ack_out == 1'b1) & (frameStream_V_keep_V_1_vld_out == 1'b1))) begin
            frameStream_V_keep_V_1_sel_rd <= ~frameStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((frameStream_V_keep_V_1_vld_in == 1'b0) & (frameStream_V_keep_V_1_state == 2'd2)) | ((frameStream_V_keep_V_1_vld_in == 1'b0) & (frameStream_V_keep_V_1_ack_out == 1'b1) & (frameStream_V_keep_V_1_state == 2'd3)))) begin
            frameStream_V_keep_V_1_state <= 2'd2;
        end else if ((((frameStream_V_keep_V_1_ack_out == 1'b0) & (frameStream_V_keep_V_1_state == 2'd1)) | ((frameStream_V_keep_V_1_ack_out == 1'b0) & (frameStream_V_keep_V_1_vld_in == 1'b1) & (frameStream_V_keep_V_1_state == 2'd3)))) begin
            frameStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((frameStream_V_keep_V_1_vld_in == 1'b0) & (frameStream_V_keep_V_1_ack_out == 1'b1)) & ~((frameStream_V_keep_V_1_ack_out == 1'b0) & (frameStream_V_keep_V_1_vld_in == 1'b1)) & (frameStream_V_keep_V_1_state == 2'd3)) | ((frameStream_V_keep_V_1_ack_out == 1'b1) & (frameStream_V_keep_V_1_state == 2'd1)) | ((frameStream_V_keep_V_1_vld_in == 1'b1) & (frameStream_V_keep_V_1_state == 2'd2)))) begin
            frameStream_V_keep_V_1_state <= 2'd3;
        end else begin
            frameStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((frameStream_V_last_V_1_ack_out == 1'b1) & (frameStream_V_last_V_1_vld_out == 1'b1))) begin
            frameStream_V_last_V_1_sel_rd <= ~frameStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((frameStream_V_last_V_1_ack_in == 1'b1) & (frameStream_V_last_V_1_vld_in == 1'b1))) begin
            frameStream_V_last_V_1_sel_wr <= ~frameStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((frameStream_V_last_V_1_vld_in == 1'b0) & (frameStream_V_last_V_1_state == 2'd2)) | ((frameStream_V_last_V_1_vld_in == 1'b0) & (frameStream_V_last_V_1_ack_out == 1'b1) & (frameStream_V_last_V_1_state == 2'd3)))) begin
            frameStream_V_last_V_1_state <= 2'd2;
        end else if ((((frameStream_V_last_V_1_ack_out == 1'b0) & (frameStream_V_last_V_1_state == 2'd1)) | ((frameStream_V_last_V_1_ack_out == 1'b0) & (frameStream_V_last_V_1_vld_in == 1'b1) & (frameStream_V_last_V_1_state == 2'd3)))) begin
            frameStream_V_last_V_1_state <= 2'd1;
        end else if (((~((frameStream_V_last_V_1_vld_in == 1'b0) & (frameStream_V_last_V_1_ack_out == 1'b1)) & ~((frameStream_V_last_V_1_ack_out == 1'b0) & (frameStream_V_last_V_1_vld_in == 1'b1)) & (frameStream_V_last_V_1_state == 2'd3)) | ((frameStream_V_last_V_1_ack_out == 1'b1) & (frameStream_V_last_V_1_state == 2'd1)) | ((frameStream_V_last_V_1_vld_in == 1'b1) & (frameStream_V_last_V_1_state == 2'd2)))) begin
            frameStream_V_last_V_1_state <= 2'd3;
        end else begin
            frameStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((frameStream_V_strb_V_1_ack_out == 1'b1) & (frameStream_V_strb_V_1_vld_out == 1'b1))) begin
            frameStream_V_strb_V_1_sel_rd <= ~frameStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((frameStream_V_strb_V_1_vld_in == 1'b0) & (frameStream_V_strb_V_1_state == 2'd2)) | ((frameStream_V_strb_V_1_vld_in == 1'b0) & (frameStream_V_strb_V_1_ack_out == 1'b1) & (frameStream_V_strb_V_1_state == 2'd3)))) begin
            frameStream_V_strb_V_1_state <= 2'd2;
        end else if ((((frameStream_V_strb_V_1_ack_out == 1'b0) & (frameStream_V_strb_V_1_state == 2'd1)) | ((frameStream_V_strb_V_1_ack_out == 1'b0) & (frameStream_V_strb_V_1_vld_in == 1'b1) & (frameStream_V_strb_V_1_state == 2'd3)))) begin
            frameStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((frameStream_V_strb_V_1_vld_in == 1'b0) & (frameStream_V_strb_V_1_ack_out == 1'b1)) & ~((frameStream_V_strb_V_1_ack_out == 1'b0) & (frameStream_V_strb_V_1_vld_in == 1'b1)) & (frameStream_V_strb_V_1_state == 2'd3)) | ((frameStream_V_strb_V_1_ack_out == 1'b1) & (frameStream_V_strb_V_1_state == 2'd1)) | ((frameStream_V_strb_V_1_vld_in == 1'b1) & (frameStream_V_strb_V_1_state == 2'd2)))) begin
            frameStream_V_strb_V_1_state <= 2'd3;
        end else begin
            frameStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((frameStream_V_user_V_1_ack_out == 1'b1) & (frameStream_V_user_V_1_vld_out == 1'b1))) begin
            frameStream_V_user_V_1_sel_rd <= ~frameStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((frameStream_V_user_V_1_ack_in == 1'b1) & (frameStream_V_user_V_1_vld_in == 1'b1))) begin
            frameStream_V_user_V_1_sel_wr <= ~frameStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frameStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((frameStream_V_user_V_1_vld_in == 1'b0) & (frameStream_V_user_V_1_state == 2'd2)) | ((frameStream_V_user_V_1_vld_in == 1'b0) & (frameStream_V_user_V_1_ack_out == 1'b1) & (frameStream_V_user_V_1_state == 2'd3)))) begin
            frameStream_V_user_V_1_state <= 2'd2;
        end else if ((((frameStream_V_user_V_1_ack_out == 1'b0) & (frameStream_V_user_V_1_state == 2'd1)) | ((frameStream_V_user_V_1_ack_out == 1'b0) & (frameStream_V_user_V_1_vld_in == 1'b1) & (frameStream_V_user_V_1_state == 2'd3)))) begin
            frameStream_V_user_V_1_state <= 2'd1;
        end else if (((~((frameStream_V_user_V_1_vld_in == 1'b0) & (frameStream_V_user_V_1_ack_out == 1'b1)) & ~((frameStream_V_user_V_1_ack_out == 1'b0) & (frameStream_V_user_V_1_vld_in == 1'b1)) & (frameStream_V_user_V_1_state == 2'd3)) | ((frameStream_V_user_V_1_ack_out == 1'b1) & (frameStream_V_user_V_1_state == 2'd1)) | ((frameStream_V_user_V_1_vld_in == 1'b1) & (frameStream_V_user_V_1_state == 2'd2)))) begin
            frameStream_V_user_V_1_state <= 2'd3;
        end else begin
            frameStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_90)) begin
        if (((empty_n_fu_490_p1 == 1'd1) & (empty_n_1_fu_498_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_skipFlag_reg_435 <= 1'd0;
        end else if (((empty_n_fu_490_p1 == 1'd0) | (empty_n_1_fu_498_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_skipFlag_reg_435 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_skipFlag_reg_435 <= ap_phi_reg_pp0_iter0_skipFlag_reg_435;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_90)) begin
        if ((tmp_66_fu_684_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_val_assign_reg_458 <= ap_phi_mux_val_assign_s_phi_fu_402_p6;
        end else if ((tmp_66_fu_684_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_val_assign_reg_458 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_val_assign_reg_458 <= ap_phi_reg_pp0_iter0_val_assign_reg_458;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_90)) begin
        if (((tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1))) begin
            hCntReg_V_load_3_reg_374 <= 12'd0;
        end else if ((vgaOutputEn_load_load_fu_611_p1 == 1'd0)) begin
            hCntReg_V_load_3_reg_374 <= hCntReg_V;
        end else if (((vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (tmp_62_fu_641_p2 == 1'd0))) begin
            hCntReg_V_load_3_reg_374 <= tmp_61_fu_634_p2;
        end else if ((1'b1 == 1'b1)) begin
            hCntReg_V_load_3_reg_374 <= ap_phi_reg_pp0_iter0_hCntReg_V_load_3_reg_374;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_90)) begin
        if (((empty_n_fu_490_p1 == 1'd1) & (empty_n_1_fu_498_p1 == 1'd1))) begin
            p_0583_1_reg_319 <= yStream_V_V_TDATA;
        end else if (((empty_n_fu_490_p1 == 1'd0) | (empty_n_1_fu_498_p1 == 1'd0))) begin
            p_0583_1_reg_319 <= ap_phi_mux_p_0583_s_phi_fu_312_p4;
        end else if ((1'b1 == 1'b1)) begin
            p_0583_1_reg_319 <= ap_phi_reg_pp0_iter0_p_0583_1_reg_319;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vCntReg_V_load_3_reg_387 <= p_tmp_1_fu_660_p3;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd0)))) begin
        vCntReg_V_load_3_reg_387 <= vCntReg_V;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vCntReg_V_load_3_reg_387 <= ap_phi_reg_pp0_iter0_vCntReg_V_load_3_reg_387;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_val_assign_reg_458 <= ap_phi_reg_pp0_iter1_val_assign_reg_458;
        skipFlag_reg_435 <= ap_phi_reg_pp0_iter1_skipFlag_reg_435;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cntReg_V <= tmp_71_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_66_fu_684_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        currentStoreSliceIdx <= p_s_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        currentStoreSliceIdx_1_reg_2149 <= currentStoreSliceIdx;
        glDVSSlice_V_0_addr_1_reg_2153 <= tmp_28_cast_fu_546_p1;
        glDVSSlice_V_1_addr_reg_2159 <= tmp_28_cast_fu_546_p1;
        hCntReg_V_load_3_reg_374_pp0_iter1_reg <= hCntReg_V_load_3_reg_374;
        p_0583_1_reg_319_pp0_iter1_reg <= p_0583_1_reg_319;
        r_V_1_reg_2212 <= r_V_1_fu_680_p1;
        r_V_1_reg_2212_pp0_iter1_reg <= r_V_1_reg_2212;
        tmp_66_reg_2217 <= tmp_66_fu_684_p2;
        tmp_66_reg_2217_pp0_iter1_reg <= tmp_66_reg_2217;
        tmp_V_reg_2141 <= xStream_V_V_TDATA;
        tmp_V_reg_2141_pp0_iter1_reg <= tmp_V_reg_2141;
        vCntReg_V_load_3_reg_387_pp0_iter1_reg <= vCntReg_V_load_3_reg_387;
        vCntReg_V_load_reg_2165 <= vCntReg_V;
        vgaOutputEn_load_reg_2194 <= vgaOutputEn;
        vgaOutputEn_load_reg_2194_pp0_iter1_reg <= vgaOutputEn_load_reg_2194;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (skipFlag_reg_435 == 1'd0))) begin
        evCntReg_V <= tmp_72_fu_2112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((frameStream_V_data_V_1_load_A == 1'b1)) begin
        frameStream_V_data_V_1_payload_A <= pixVal_V_fu_2032_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((frameStream_V_data_V_1_load_B == 1'b1)) begin
        frameStream_V_data_V_1_payload_B <= pixVal_V_fu_2032_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((frameStream_V_last_V_1_load_A == 1'b1)) begin
        frameStream_V_last_V_1_payload_A <= tmp_last_V_reg_2198;
    end
end

always @ (posedge ap_clk) begin
    if ((frameStream_V_last_V_1_load_B == 1'b1)) begin
        frameStream_V_last_V_1_payload_B <= tmp_last_V_reg_2198;
    end
end

always @ (posedge ap_clk) begin
    if ((frameStream_V_user_V_1_load_A == 1'b1)) begin
        frameStream_V_user_V_1_payload_A <= tmp_user_V_fu_2040_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((frameStream_V_user_V_1_load_B == 1'b1)) begin
        frameStream_V_user_V_1_payload_B <= tmp_user_V_fu_2040_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        glDVSSlice_V_0_addr_reg_2183 <= tmp_90_cast_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd0))) begin
        glDVSSlice_V_1_addr_1_reg_2172 <= tmp_93_cast_fu_583_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_hCntReg_V_flag_phi_fu_334_p6 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hCntReg_V <= ap_phi_mux_hCntReg_V_load_3_phi_fu_377_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_66_reg_2217_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        startX_V <= p_tmp_s_fu_2064_p3;
        startY_V <= storemerge1_fu_2094_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_20_reg_2189 <= grp_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd0))) begin
        tmp_33_reg_2178 <= grp_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_60_reg_2204 <= tmp_60_fu_628_p2;
        tmp_last_V_reg_2198 <= tmp_last_V_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_vCntReg_V_flag_phi_fu_349_p6 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vCntReg_V <= ap_phi_mux_vCntReg_V_load_3_phi_fu_390_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_vgaOutputEn_flag_1_phi_fu_415_p4 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vgaOutputEn <= ap_phi_mux_vgaOutputEn_new_1_phi_fu_427_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd0))) begin
        ap_phi_mux_hCntReg_V_flag_phi_fu_334_p6 = 1'd0;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd0)))) begin
        ap_phi_mux_hCntReg_V_flag_phi_fu_334_p6 = 1'd1;
    end else begin
        ap_phi_mux_hCntReg_V_flag_phi_fu_334_p6 = ap_phi_reg_pp0_iter0_hCntReg_V_flag_reg_331;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_639)) begin
        if (((tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1))) begin
            ap_phi_mux_hCntReg_V_load_3_phi_fu_377_p6 = 12'd0;
        end else if ((vgaOutputEn_load_load_fu_611_p1 == 1'd0)) begin
            ap_phi_mux_hCntReg_V_load_3_phi_fu_377_p6 = hCntReg_V;
        end else if (((vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (tmp_62_fu_641_p2 == 1'd0))) begin
            ap_phi_mux_hCntReg_V_load_3_phi_fu_377_p6 = tmp_61_fu_634_p2;
        end else begin
            ap_phi_mux_hCntReg_V_load_3_phi_fu_377_p6 = ap_phi_reg_pp0_iter0_hCntReg_V_load_3_reg_374;
        end
    end else begin
        ap_phi_mux_hCntReg_V_load_3_phi_fu_377_p6 = ap_phi_reg_pp0_iter0_hCntReg_V_load_3_reg_374;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((currentStoreSliceIdx_1_reg_2149 == 1'd1)) begin
            ap_phi_mux_p_0568_2_phi_fu_452_p4 = p_0568_1_fu_1934_p3;
        end else if ((currentStoreSliceIdx_1_reg_2149 == 1'd0)) begin
            ap_phi_mux_p_0568_2_phi_fu_452_p4 = p_2_fu_1285_p3;
        end else begin
            ap_phi_mux_p_0568_2_phi_fu_452_p4 = ap_phi_reg_pp0_iter1_p_0568_2_reg_449;
        end
    end else begin
        ap_phi_mux_p_0568_2_phi_fu_452_p4 = ap_phi_reg_pp0_iter1_p_0568_2_reg_449;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_639)) begin
        if (((empty_n_fu_490_p1 == 1'd1) & (empty_n_1_fu_498_p1 == 1'd1))) begin
            ap_phi_mux_p_0583_1_phi_fu_323_p4 = yStream_V_V_TDATA;
        end else if (((empty_n_fu_490_p1 == 1'd0) | (empty_n_1_fu_498_p1 == 1'd0))) begin
            ap_phi_mux_p_0583_1_phi_fu_323_p4 = ap_phi_mux_p_0583_s_phi_fu_312_p4;
        end else begin
            ap_phi_mux_p_0583_1_phi_fu_323_p4 = ap_phi_reg_pp0_iter0_p_0583_1_reg_319;
        end
    end else begin
        ap_phi_mux_p_0583_1_phi_fu_323_p4 = ap_phi_reg_pp0_iter0_p_0583_1_reg_319;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (empty_n_fu_490_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_1_fu_498_p1 == 1'd0))) begin
        ap_phi_mux_p_0583_s_phi_fu_312_p4 = yStream_V_V_TDATA;
    end else begin
        ap_phi_mux_p_0583_s_phi_fu_312_p4 = ap_phi_reg_pp0_iter0_p_0583_s_reg_309;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_vCntReg_V_flag_phi_fu_349_p6 = 1'd1;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd0)))) begin
        ap_phi_mux_vCntReg_V_flag_phi_fu_349_p6 = 1'd0;
    end else begin
        ap_phi_mux_vCntReg_V_flag_phi_fu_349_p6 = ap_phi_reg_pp0_iter0_vCntReg_V_flag_reg_346;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_vCntReg_V_load_3_phi_fu_390_p6 = p_tmp_1_fu_660_p3;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd0)))) begin
        ap_phi_mux_vCntReg_V_load_3_phi_fu_390_p6 = vCntReg_V;
    end else begin
        ap_phi_mux_vCntReg_V_load_3_phi_fu_390_p6 = ap_phi_reg_pp0_iter0_vCntReg_V_load_3_reg_387;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_639)) begin
        if (((tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1))) begin
            ap_phi_mux_val_assign_s_phi_fu_402_p6 = not_tmp_s_fu_669_p2;
        end else if ((vgaOutputEn_load_load_fu_611_p1 == 1'd0)) begin
            ap_phi_mux_val_assign_s_phi_fu_402_p6 = vgaOutputEn;
        end else if (((vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (tmp_62_fu_641_p2 == 1'd0))) begin
            ap_phi_mux_val_assign_s_phi_fu_402_p6 = 1'd1;
        end else begin
            ap_phi_mux_val_assign_s_phi_fu_402_p6 = ap_phi_reg_pp0_iter0_val_assign_s_reg_399;
        end
    end else begin
        ap_phi_mux_val_assign_s_phi_fu_402_p6 = ap_phi_reg_pp0_iter0_val_assign_s_reg_399;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_639)) begin
        if ((tmp_66_fu_684_p2 == 1'd0)) begin
            ap_phi_mux_vgaOutputEn_flag_1_phi_fu_415_p4 = ap_phi_mux_vgaOutputEn_flag_phi_fu_364_p6;
        end else if ((tmp_66_fu_684_p2 == 1'd1)) begin
            ap_phi_mux_vgaOutputEn_flag_1_phi_fu_415_p4 = 1'd1;
        end else begin
            ap_phi_mux_vgaOutputEn_flag_1_phi_fu_415_p4 = ap_phi_reg_pp0_iter0_vgaOutputEn_flag_1_reg_412;
        end
    end else begin
        ap_phi_mux_vgaOutputEn_flag_1_phi_fu_415_p4 = ap_phi_reg_pp0_iter0_vgaOutputEn_flag_1_reg_412;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd1) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_vgaOutputEn_flag_phi_fu_364_p6 = tmp_64_fu_653_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0) & (vgaOutputEn_load_load_fu_611_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_62_fu_641_p2 == 1'd0)))) begin
        ap_phi_mux_vgaOutputEn_flag_phi_fu_364_p6 = 1'd0;
    end else begin
        ap_phi_mux_vgaOutputEn_flag_phi_fu_364_p6 = ap_phi_reg_pp0_iter0_vgaOutputEn_flag_reg_361;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_639)) begin
        if ((tmp_66_fu_684_p2 == 1'd0)) begin
            ap_phi_mux_vgaOutputEn_new_1_phi_fu_427_p4 = 1'd0;
        end else if ((tmp_66_fu_684_p2 == 1'd1)) begin
            ap_phi_mux_vgaOutputEn_new_1_phi_fu_427_p4 = 1'd1;
        end else begin
            ap_phi_mux_vgaOutputEn_new_1_phi_fu_427_p4 = ap_phi_reg_pp0_iter0_vgaOutputEn_new_1_reg_424;
        end
    end else begin
        ap_phi_mux_vgaOutputEn_new_1_phi_fu_427_p4 = ap_phi_reg_pp0_iter0_vgaOutputEn_new_1_reg_424;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_count_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        count_V_ap_vld = 1'b1;
    end else begin
        count_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (vgaOutputEn_load_reg_2194_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        frameStream_TDATA_blk_n = frameStream_V_data_V_1_state[1'd1];
    end else begin
        frameStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((frameStream_V_data_V_1_sel == 1'b1)) begin
        frameStream_V_data_V_1_data_out = frameStream_V_data_V_1_payload_B;
    end else begin
        frameStream_V_data_V_1_data_out = frameStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frameStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        frameStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frameStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        frameStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frameStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        frameStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frameStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        frameStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((frameStream_V_last_V_1_sel == 1'b1)) begin
        frameStream_V_last_V_1_data_out = frameStream_V_last_V_1_payload_B;
    end else begin
        frameStream_V_last_V_1_data_out = frameStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frameStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        frameStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frameStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        frameStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((frameStream_V_user_V_1_sel == 1'b1)) begin
        frameStream_V_user_V_1_data_out = frameStream_V_user_V_1_payload_B;
    end else begin
        frameStream_V_user_V_1_data_out = frameStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (vgaOutputEn_load_reg_2194 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frameStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        frameStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_639)) begin
        if ((currentStoreSliceIdx_1_load_fu_508_p1 == 1'd1)) begin
            glDVSSlice_V_0_address0 = tmp_90_cast_fu_606_p1;
        end else if ((currentStoreSliceIdx_1_load_fu_508_p1 == 1'd0)) begin
            glDVSSlice_V_0_address0 = tmp_28_cast_fu_546_p1;
        end else begin
            glDVSSlice_V_0_address0 = 'bx;
        end
    end else begin
        glDVSSlice_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((currentStoreSliceIdx_1_reg_2149 == 1'd1)) begin
            glDVSSlice_V_0_address1 = glDVSSlice_V_0_addr_reg_2183;
        end else if ((currentStoreSliceIdx_1_reg_2149 == 1'd0)) begin
            glDVSSlice_V_0_address1 = glDVSSlice_V_0_addr_1_reg_2153;
        end else begin
            glDVSSlice_V_0_address1 = 'bx;
        end
    end else begin
        glDVSSlice_V_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd0)))) begin
        glDVSSlice_V_0_ce0 = 1'b1;
    end else begin
        glDVSSlice_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_reg_2149 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_reg_2149 == 1'd0)))) begin
        glDVSSlice_V_0_ce1 = 1'b1;
    end else begin
        glDVSSlice_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((currentStoreSliceIdx_1_reg_2149 == 1'd1)) begin
            glDVSSlice_V_0_d1 = tmp_97_fu_2013_p4;
        end else if ((currentStoreSliceIdx_1_reg_2149 == 1'd0)) begin
            glDVSSlice_V_0_d1 = tmp_122_fu_1086_p4;
        end else begin
            glDVSSlice_V_0_d1 = 'bx;
        end
    end else begin
        glDVSSlice_V_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_reg_2149 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_reg_2149 == 1'd0)))) begin
        glDVSSlice_V_0_we1 = 1'b1;
    end else begin
        glDVSSlice_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_639)) begin
        if ((currentStoreSliceIdx_1_load_fu_508_p1 == 1'd1)) begin
            glDVSSlice_V_1_address0 = tmp_28_cast_fu_546_p1;
        end else if ((currentStoreSliceIdx_1_load_fu_508_p1 == 1'd0)) begin
            glDVSSlice_V_1_address0 = tmp_93_cast_fu_583_p1;
        end else begin
            glDVSSlice_V_1_address0 = 'bx;
        end
    end else begin
        glDVSSlice_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((currentStoreSliceIdx_1_reg_2149 == 1'd1)) begin
            glDVSSlice_V_1_address1 = glDVSSlice_V_1_addr_reg_2159;
        end else if ((currentStoreSliceIdx_1_reg_2149 == 1'd0)) begin
            glDVSSlice_V_1_address1 = glDVSSlice_V_1_addr_1_reg_2172;
        end else begin
            glDVSSlice_V_1_address1 = 'bx;
        end
    end else begin
        glDVSSlice_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_load_fu_508_p1 == 1'd0)))) begin
        glDVSSlice_V_1_ce0 = 1'b1;
    end else begin
        glDVSSlice_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_reg_2149 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_reg_2149 == 1'd0)))) begin
        glDVSSlice_V_1_ce1 = 1'b1;
    end else begin
        glDVSSlice_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((currentStoreSliceIdx_1_reg_2149 == 1'd1)) begin
            glDVSSlice_V_1_d1 = tmp_43_fu_1735_p4;
        end else if ((currentStoreSliceIdx_1_reg_2149 == 1'd0)) begin
            glDVSSlice_V_1_d1 = tmp_140_fu_1364_p4;
        end else begin
            glDVSSlice_V_1_d1 = 'bx;
        end
    end else begin
        glDVSSlice_V_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (currentStoreSliceIdx_1_reg_2149 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currentStoreSliceIdx_1_reg_2149 == 1'd0)))) begin
        glDVSSlice_V_1_we1 = 1'b1;
    end else begin
        glDVSSlice_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_hCnt_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        hCnt_V_ap_vld = 1'b1;
    end else begin
        hCnt_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_regX_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        regX_V_ap_vld = 1'b1;
    end else begin
        regX_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_regY_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        regY_V_ap_vld = 1'b1;
    end else begin
        regY_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_vCnt_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vCnt_V_ap_vld = 1'b1;
    end else begin
        vCnt_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_vgaEn_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vgaEn_V_ap_vld = 1'b1;
    end else begin
        vgaEn_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xStream_V_V_TREADY = 1'b1;
    end else begin
        xStream_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_n_fu_490_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        yStream_V_V_TREADY = 1'b1;
    end else begin
        yStream_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((frameStream_V_dest_V_1_ack_in == 1'b0) | (frameStream_V_id_V_1_ack_in == 1'b0) | (frameStream_V_last_V_1_ack_in == 1'b0) | (frameStream_V_user_V_1_ack_in == 1'b0) | (frameStream_V_strb_V_1_ack_in == 1'b0) | (frameStream_V_keep_V_1_ack_in == 1'b0) | (frameStream_V_data_V_1_ack_in == 1'b0))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((frameStream_V_dest_V_1_ack_in == 1'b0) | (frameStream_V_id_V_1_ack_in == 1'b0) | (frameStream_V_last_V_1_ack_in == 1'b0) | (frameStream_V_user_V_1_ack_in == 1'b0) | (frameStream_V_strb_V_1_ack_in == 1'b0) | (frameStream_V_keep_V_1_ack_in == 1'b0) | (frameStream_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((frameStream_V_dest_V_1_ack_in == 1'b0) | (frameStream_V_id_V_1_ack_in == 1'b0) | (frameStream_V_last_V_1_ack_in == 1'b0) | (frameStream_V_user_V_1_ack_in == 1'b0) | (frameStream_V_strb_V_1_ack_in == 1'b0) | (frameStream_V_keep_V_1_ack_in == 1'b0) | (frameStream_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((vgaOutputEn_load_reg_2194 == 1'd1) & (frameStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((vgaOutputEn_load_reg_2194_pp0_iter1_reg == 1'd1) & (frameStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((frameStream_V_dest_V_1_ack_in == 1'b0) | (frameStream_V_id_V_1_ack_in == 1'b0) | (frameStream_V_last_V_1_ack_in == 1'b0) | (frameStream_V_user_V_1_ack_in == 1'b0) | (frameStream_V_strb_V_1_ack_in == 1'b0) | (frameStream_V_keep_V_1_ack_in == 1'b0) | (frameStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_540 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_639 = ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_90 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_hCntReg_V_flag_reg_331 = 'bx;

assign ap_phi_reg_pp0_iter0_hCntReg_V_load_3_reg_374 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0583_1_reg_319 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0583_s_reg_309 = 'bx;

assign ap_phi_reg_pp0_iter0_skipFlag_reg_435 = 'bx;

assign ap_phi_reg_pp0_iter0_vCntReg_V_flag_reg_346 = 'bx;

assign ap_phi_reg_pp0_iter0_vCntReg_V_load_3_reg_387 = 'bx;

assign ap_phi_reg_pp0_iter0_val_assign_reg_458 = 'bx;

assign ap_phi_reg_pp0_iter0_val_assign_s_reg_399 = 'bx;

assign ap_phi_reg_pp0_iter0_vgaOutputEn_flag_1_reg_412 = 'bx;

assign ap_phi_reg_pp0_iter0_vgaOutputEn_flag_reg_361 = 'bx;

assign ap_phi_reg_pp0_iter0_vgaOutputEn_new_1_reg_424 = 'bx;

assign ap_phi_reg_pp0_iter1_p_0568_2_reg_449 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign count_V = r_V_1_reg_2212_pp0_iter1_reg;

assign currentStoreSliceIdx_1_load_fu_508_p1 = currentStoreSliceIdx;

assign empty_n_1_fu_498_p1 = yStream_V_V_TVALID;

assign empty_n_fu_490_p1 = xStream_V_V_TVALID;

assign frameStream_TDATA = frameStream_V_data_V_1_data_out;

assign frameStream_TDEST = frameStream_V_dest_V_1_data_out;

assign frameStream_TID = frameStream_V_id_V_1_data_out;

assign frameStream_TKEEP = frameStream_V_keep_V_1_data_out;

assign frameStream_TLAST = frameStream_V_last_V_1_data_out;

assign frameStream_TSTRB = frameStream_V_strb_V_1_data_out;

assign frameStream_TUSER = frameStream_V_user_V_1_data_out;

assign frameStream_TVALID = frameStream_V_dest_V_1_state[1'd0];

assign frameStream_V_data_V_1_ack_in = frameStream_V_data_V_1_state[1'd1];

assign frameStream_V_data_V_1_ack_out = frameStream_TREADY;

assign frameStream_V_data_V_1_load_A = (frameStream_V_data_V_1_state_cmp_full & ~frameStream_V_data_V_1_sel_wr);

assign frameStream_V_data_V_1_load_B = (frameStream_V_data_V_1_state_cmp_full & frameStream_V_data_V_1_sel_wr);

assign frameStream_V_data_V_1_sel = frameStream_V_data_V_1_sel_rd;

assign frameStream_V_data_V_1_state_cmp_full = ((frameStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign frameStream_V_data_V_1_vld_out = frameStream_V_data_V_1_state[1'd0];

assign frameStream_V_dest_V_1_ack_in = frameStream_V_dest_V_1_state[1'd1];

assign frameStream_V_dest_V_1_ack_out = frameStream_TREADY;

assign frameStream_V_dest_V_1_data_out = 1'd0;

assign frameStream_V_dest_V_1_sel = frameStream_V_dest_V_1_sel_rd;

assign frameStream_V_dest_V_1_vld_out = frameStream_V_dest_V_1_state[1'd0];

assign frameStream_V_id_V_1_ack_in = frameStream_V_id_V_1_state[1'd1];

assign frameStream_V_id_V_1_ack_out = frameStream_TREADY;

assign frameStream_V_id_V_1_data_out = 1'd0;

assign frameStream_V_id_V_1_sel = frameStream_V_id_V_1_sel_rd;

assign frameStream_V_id_V_1_vld_out = frameStream_V_id_V_1_state[1'd0];

assign frameStream_V_keep_V_1_ack_in = frameStream_V_keep_V_1_state[1'd1];

assign frameStream_V_keep_V_1_ack_out = frameStream_TREADY;

assign frameStream_V_keep_V_1_data_out = 3'd7;

assign frameStream_V_keep_V_1_sel = frameStream_V_keep_V_1_sel_rd;

assign frameStream_V_keep_V_1_vld_out = frameStream_V_keep_V_1_state[1'd0];

assign frameStream_V_last_V_1_ack_in = frameStream_V_last_V_1_state[1'd1];

assign frameStream_V_last_V_1_ack_out = frameStream_TREADY;

assign frameStream_V_last_V_1_load_A = (frameStream_V_last_V_1_state_cmp_full & ~frameStream_V_last_V_1_sel_wr);

assign frameStream_V_last_V_1_load_B = (frameStream_V_last_V_1_state_cmp_full & frameStream_V_last_V_1_sel_wr);

assign frameStream_V_last_V_1_sel = frameStream_V_last_V_1_sel_rd;

assign frameStream_V_last_V_1_state_cmp_full = ((frameStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign frameStream_V_last_V_1_vld_out = frameStream_V_last_V_1_state[1'd0];

assign frameStream_V_strb_V_1_ack_in = frameStream_V_strb_V_1_state[1'd1];

assign frameStream_V_strb_V_1_ack_out = frameStream_TREADY;

assign frameStream_V_strb_V_1_data_out = 3'd7;

assign frameStream_V_strb_V_1_sel = frameStream_V_strb_V_1_sel_rd;

assign frameStream_V_strb_V_1_vld_out = frameStream_V_strb_V_1_state[1'd0];

assign frameStream_V_user_V_1_ack_in = frameStream_V_user_V_1_state[1'd1];

assign frameStream_V_user_V_1_ack_out = frameStream_TREADY;

assign frameStream_V_user_V_1_load_A = (frameStream_V_user_V_1_state_cmp_full & ~frameStream_V_user_V_1_sel_wr);

assign frameStream_V_user_V_1_load_B = (frameStream_V_user_V_1_state_cmp_full & frameStream_V_user_V_1_sel_wr);

assign frameStream_V_user_V_1_sel = frameStream_V_user_V_1_sel_rd;

assign frameStream_V_user_V_1_state_cmp_full = ((frameStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign frameStream_V_user_V_1_vld_out = frameStream_V_user_V_1_state[1'd0];

assign grp_fu_471_p4 = {{vCntReg_V[10:6]}};

assign grp_fu_480_p2 = ((hCntReg_V > 12'd345) ? 1'b1 : 1'b0);

assign grp_fu_485_p2 = ((vCntReg_V_load_reg_2165 > 12'd259) ? 1'b1 : 1'b0);

assign hCnt_V = hCntReg_V_load_3_reg_374_pp0_iter1_reg;

assign index_assign_10_1_fu_758_p1 = tmp_74_fu_750_p3;

assign index_assign_10_2_fu_778_p1 = tmp_75_fu_770_p3;

assign index_assign_10_3_fu_798_p1 = tmp_76_fu_790_p3;

assign index_assign_10_4_fu_818_p1 = tmp_77_fu_810_p3;

assign index_assign_10_5_fu_838_p1 = tmp_78_fu_830_p3;

assign index_assign_10_6_fu_858_p1 = tmp_79_fu_850_p3;

assign index_assign_10_7_fu_878_p1 = tmp_80_fu_870_p3;

assign index_assign_14_1_fu_1133_p1 = tmp_82_fu_1125_p3;

assign index_assign_14_2_fu_1153_p1 = tmp_83_fu_1145_p3;

assign index_assign_14_3_fu_1173_p1 = tmp_84_fu_1165_p3;

assign index_assign_14_4_fu_1193_p1 = tmp_85_fu_1185_p3;

assign index_assign_14_5_fu_1213_p1 = tmp_86_fu_1205_p3;

assign index_assign_14_6_fu_1233_p1 = tmp_87_fu_1225_p3;

assign index_assign_14_7_fu_1253_p1 = tmp_88_fu_1245_p3;

assign index_assign_18_1_fu_1407_p1 = tmp_2_fu_1399_p3;

assign index_assign_18_2_fu_1427_p1 = tmp_4_fu_1419_p3;

assign index_assign_18_3_fu_1447_p1 = tmp_5_fu_1439_p3;

assign index_assign_18_4_fu_1467_p1 = tmp_10_fu_1459_p3;

assign index_assign_18_5_fu_1487_p1 = tmp_15_fu_1479_p3;

assign index_assign_18_6_fu_1507_p1 = tmp_17_fu_1499_p3;

assign index_assign_18_7_fu_1527_p1 = tmp_21_fu_1519_p3;

assign index_assign_1_fu_738_p1 = tmp_73_fu_730_p3;

assign index_assign_22_1_fu_1782_p1 = tmp_38_fu_1774_p3;

assign index_assign_22_2_fu_1802_p1 = tmp_39_fu_1794_p3;

assign index_assign_22_3_fu_1822_p1 = tmp_45_fu_1814_p3;

assign index_assign_22_4_fu_1842_p1 = tmp_46_fu_1834_p3;

assign index_assign_22_5_fu_1862_p1 = tmp_48_fu_1854_p3;

assign index_assign_22_6_fu_1882_p1 = tmp_49_fu_1874_p3;

assign index_assign_22_7_fu_1902_p1 = tmp_58_fu_1894_p3;

assign index_assign_2_fu_1762_p1 = tmp_35_fu_1754_p3;

assign index_assign_3_fu_1113_p1 = tmp_81_fu_1105_p3;

assign index_assign_s_fu_1387_p1 = tmp_1_fu_1379_p3;

assign not_tmp_s_fu_669_p2 = (tmp_64_fu_653_p2 ^ 1'd1);

assign or_cond1_fu_1746_p2 = (tmp_20_reg_2189 | grp_fu_485_p2);

assign or_cond_fu_1097_p2 = (tmp_33_reg_2178 | grp_fu_485_p2);

assign p_0568_1_fu_1934_p3 = ((or_cond1_fu_1746_p2[0:0] === 1'b1) ? 8'd102 : p_Result_77_7_fu_1914_p9);

assign p_2_fu_1285_p3 = ((or_cond_fu_1097_p2[0:0] === 1'b1) ? 8'd102 : p_Result_61_7_fu_1265_p9);

assign p_Repl2_11_1_fu_950_p1 = tmp_109_fu_942_p3;

assign p_Repl2_11_2_fu_972_p1 = tmp_111_fu_964_p3;

assign p_Repl2_11_3_fu_994_p1 = tmp_113_fu_986_p3;

assign p_Repl2_11_4_fu_1016_p1 = tmp_115_fu_1008_p3;

assign p_Repl2_11_5_fu_1038_p1 = tmp_117_fu_1030_p3;

assign p_Repl2_11_6_fu_1060_p1 = tmp_119_fu_1052_p3;

assign p_Repl2_11_7_fu_1082_p1 = tmp_121_fu_1074_p3;

assign p_Repl2_8_1_fu_1599_p1 = tmp_25_fu_1591_p3;

assign p_Repl2_8_2_fu_1621_p1 = tmp_27_fu_1613_p3;

assign p_Repl2_8_3_fu_1643_p1 = tmp_29_fu_1635_p3;

assign p_Repl2_8_4_fu_1665_p1 = tmp_32_fu_1657_p3;

assign p_Repl2_8_5_fu_1687_p1 = tmp_36_fu_1679_p3;

assign p_Repl2_8_6_fu_1709_p1 = tmp_40_fu_1701_p3;

assign p_Repl2_8_7_fu_1731_p1 = tmp_42_fu_1723_p3;

assign p_Repl2_8_fu_1577_p1 = tmp_23_fu_1573_p1;

assign p_Repl2_s_fu_928_p1 = tmp_107_fu_924_p1;

assign p_Result_53_7_fu_890_p9 = {{{{{{{{tmp_106_fu_882_p3}, {tmp_105_fu_862_p3}}, {tmp_104_fu_842_p3}}, {tmp_103_fu_822_p3}}, {tmp_102_fu_802_p3}}, {tmp_101_fu_782_p3}}, {tmp_100_fu_762_p3}}, {tmp_99_fu_742_p3}};

assign p_Result_61_7_fu_1265_p9 = {{{{{{{{tmp_132_fu_1257_p3}, {tmp_131_fu_1237_p3}}, {tmp_130_fu_1217_p3}}, {tmp_129_fu_1197_p3}}, {tmp_128_fu_1177_p3}}, {tmp_127_fu_1157_p3}}, {tmp_126_fu_1137_p3}}, {tmp_125_fu_1117_p3}};

assign p_Result_69_7_fu_1539_p9 = {{{{{{{{tmp_22_fu_1531_p3}, {tmp_18_fu_1511_p3}}, {tmp_16_fu_1491_p3}}, {tmp_13_fu_1471_p3}}, {tmp_12_fu_1451_p3}}, {tmp_11_fu_1431_p3}}, {tmp_9_fu_1411_p3}}, {tmp_8_fu_1391_p3}};

assign p_Result_77_7_fu_1914_p9 = {{{{{{{{tmp_65_fu_1906_p3}, {tmp_57_fu_1886_p3}}, {tmp_56_fu_1866_p3}}, {tmp_55_fu_1846_p3}}, {tmp_54_fu_1826_p3}}, {tmp_53_fu_1806_p3}}, {tmp_52_fu_1786_p3}}, {tmp_51_fu_1766_p3}};

assign p_s_fu_512_p2 = (currentStoreSliceIdx ^ 1'd1);

assign p_tmp_1_fu_660_p3 = ((tmp_64_fu_653_p2[0:0] === 1'b1) ? 12'd0 : tmp_63_fu_647_p2);

assign p_tmp_s_fu_2064_p3 = ((tmp_67_fu_2052_p2[0:0] === 1'b1) ? 16'd0 : tmp_68_fu_2058_p2);

assign pixVal_V_fu_2032_p3 = ((tmp_last_V_reg_2198[0:0] === 1'b1) ? 24'd0 : r_V_fu_2024_p3);

assign r_V_1_fu_680_p1 = cntReg_V[19:0];

assign r_V_fu_2024_p3 = {{ap_phi_mux_p_0568_2_phi_fu_452_p4}, {16'd0}};

assign regX_V = tmp_V_reg_2141_pp0_iter1_reg;

assign regY_V = p_0583_1_reg_319_pp0_iter1_reg;

assign storemerge1_fu_2094_p3 = ((tmp_69_fu_2082_p2[0:0] === 1'b1) ? 16'd0 : tmp_70_fu_2088_p2);

assign tmpPixVal_V_2_fu_1565_p3 = ((ap_phi_reg_pp0_iter1_skipFlag_reg_435[0:0] === 1'b1) ? p_Result_69_7_fu_1539_p9 : tmp_s_fu_1559_p2);

assign tmpPixVal_V_fu_916_p3 = ((ap_phi_reg_pp0_iter1_skipFlag_reg_435[0:0] === 1'b1) ? p_Result_53_7_fu_890_p9 : tmp_14_fu_910_p2);

assign tmp_100_fu_762_p3 = glDVSSlice_V_0_q0[index_assign_10_1_fu_758_p1];

assign tmp_101_fu_782_p3 = glDVSSlice_V_0_q0[index_assign_10_2_fu_778_p1];

assign tmp_102_fu_802_p3 = glDVSSlice_V_0_q0[index_assign_10_3_fu_798_p1];

assign tmp_103_fu_822_p3 = glDVSSlice_V_0_q0[index_assign_10_4_fu_818_p1];

assign tmp_104_fu_842_p3 = glDVSSlice_V_0_q0[index_assign_10_5_fu_838_p1];

assign tmp_105_fu_862_p3 = glDVSSlice_V_0_q0[index_assign_10_6_fu_858_p1];

assign tmp_106_fu_882_p3 = glDVSSlice_V_0_q0[index_assign_10_7_fu_878_p1];

assign tmp_107_fu_924_p1 = tmpPixVal_V_fu_916_p3[0:0];

always @ (*) begin
    tmp_108_fu_932_p4 = glDVSSlice_V_0_q0;
    tmp_108_fu_932_p4[index_assign_1_fu_738_p1] = |(p_Repl2_s_fu_928_p1);
end

assign tmp_109_fu_942_p3 = tmpPixVal_V_fu_916_p3[32'd1];

assign tmp_10_fu_1459_p3 = {{tmp_7_fu_1375_p1}, {3'd4}};

always @ (*) begin
    tmp_110_fu_954_p4 = tmp_108_fu_932_p4;
    tmp_110_fu_954_p4[index_assign_10_1_fu_758_p1] = |(p_Repl2_11_1_fu_950_p1);
end

assign tmp_111_fu_964_p3 = tmpPixVal_V_fu_916_p3[32'd2];

always @ (*) begin
    tmp_112_fu_976_p4 = tmp_110_fu_954_p4;
    tmp_112_fu_976_p4[index_assign_10_2_fu_778_p1] = |(p_Repl2_11_2_fu_972_p1);
end

assign tmp_113_fu_986_p3 = tmpPixVal_V_fu_916_p3[32'd3];

always @ (*) begin
    tmp_114_fu_998_p4 = tmp_112_fu_976_p4;
    tmp_114_fu_998_p4[index_assign_10_3_fu_798_p1] = |(p_Repl2_11_3_fu_994_p1);
end

assign tmp_115_fu_1008_p3 = tmpPixVal_V_fu_916_p3[32'd4];

always @ (*) begin
    tmp_116_fu_1020_p4 = tmp_114_fu_998_p4;
    tmp_116_fu_1020_p4[index_assign_10_4_fu_818_p1] = |(p_Repl2_11_4_fu_1016_p1);
end

assign tmp_117_fu_1030_p3 = tmpPixVal_V_fu_916_p3[32'd5];

always @ (*) begin
    tmp_118_fu_1042_p4 = tmp_116_fu_1020_p4;
    tmp_118_fu_1042_p4[index_assign_10_5_fu_838_p1] = |(p_Repl2_11_5_fu_1038_p1);
end

assign tmp_119_fu_1052_p3 = tmpPixVal_V_fu_916_p3[32'd6];

assign tmp_11_cast_fu_588_p1 = hCntReg_V;

assign tmp_11_fu_1431_p3 = glDVSSlice_V_1_q0[index_assign_18_2_fu_1427_p1];

always @ (*) begin
    tmp_120_fu_1064_p4 = tmp_118_fu_1042_p4;
    tmp_120_fu_1064_p4[index_assign_10_6_fu_858_p1] = |(p_Repl2_11_6_fu_1060_p1);
end

assign tmp_121_fu_1074_p3 = tmpPixVal_V_fu_916_p3[32'd7];

always @ (*) begin
    tmp_122_fu_1086_p4 = tmp_120_fu_1064_p4;
    tmp_122_fu_1086_p4[index_assign_10_7_fu_878_p1] = |(p_Repl2_11_7_fu_1082_p1);
end

assign tmp_124_fu_1102_p1 = vCntReg_V_load_reg_2165[5:0];

assign tmp_125_fu_1117_p3 = glDVSSlice_V_1_q0[index_assign_3_fu_1113_p1];

assign tmp_126_fu_1137_p3 = glDVSSlice_V_1_q0[index_assign_14_1_fu_1133_p1];

assign tmp_127_fu_1157_p3 = glDVSSlice_V_1_q0[index_assign_14_2_fu_1153_p1];

assign tmp_128_fu_1177_p3 = glDVSSlice_V_1_q0[index_assign_14_3_fu_1173_p1];

assign tmp_129_fu_1197_p3 = glDVSSlice_V_1_q0[index_assign_14_4_fu_1193_p1];

assign tmp_12_fu_1451_p3 = glDVSSlice_V_1_q0[index_assign_18_3_fu_1447_p1];

assign tmp_130_fu_1217_p3 = glDVSSlice_V_1_q0[index_assign_14_5_fu_1213_p1];

assign tmp_131_fu_1237_p3 = glDVSSlice_V_1_q0[index_assign_14_6_fu_1233_p1];

assign tmp_132_fu_1257_p3 = glDVSSlice_V_1_q0[index_assign_14_7_fu_1253_p1];

always @ (*) begin
    tmp_133_fu_1294_p4 = glDVSSlice_V_1_q0;
    tmp_133_fu_1294_p4[index_assign_3_fu_1113_p1] = |(64'd0);
end

always @ (*) begin
    tmp_134_fu_1304_p4 = tmp_133_fu_1294_p4;
    tmp_134_fu_1304_p4[index_assign_14_1_fu_1133_p1] = |(64'd0);
end

always @ (*) begin
    tmp_135_fu_1314_p4 = tmp_134_fu_1304_p4;
    tmp_135_fu_1314_p4[index_assign_14_2_fu_1153_p1] = |(64'd0);
end

always @ (*) begin
    tmp_136_fu_1324_p4 = tmp_135_fu_1314_p4;
    tmp_136_fu_1324_p4[index_assign_14_3_fu_1173_p1] = |(64'd0);
end

always @ (*) begin
    tmp_137_fu_1334_p4 = tmp_136_fu_1324_p4;
    tmp_137_fu_1334_p4[index_assign_14_4_fu_1193_p1] = |(64'd0);
end

always @ (*) begin
    tmp_138_fu_1344_p4 = tmp_137_fu_1334_p4;
    tmp_138_fu_1344_p4[index_assign_14_5_fu_1213_p1] = |(64'd0);
end

always @ (*) begin
    tmp_139_fu_1354_p4 = tmp_138_fu_1344_p4;
    tmp_139_fu_1354_p4[index_assign_14_6_fu_1233_p1] = |(64'd0);
end

assign tmp_13_fu_1471_p3 = glDVSSlice_V_1_q0[index_assign_18_4_fu_1467_p1];

always @ (*) begin
    tmp_140_fu_1364_p4 = tmp_139_fu_1354_p4;
    tmp_140_fu_1364_p4[index_assign_14_7_fu_1253_p1] = |(64'd0);
end

assign tmp_14_fu_910_p2 = (8'd1 + p_Result_53_7_fu_890_p9);

assign tmp_15_fu_1479_p3 = {{tmp_7_fu_1375_p1}, {3'd5}};

assign tmp_16_fu_1491_p3 = glDVSSlice_V_1_q0[index_assign_18_5_fu_1487_p1];

assign tmp_17_fu_1499_p3 = {{tmp_7_fu_1375_p1}, {3'd6}};

assign tmp_18_cast_fu_532_p3 = {{tmp_3_fu_522_p4}, {9'd0}};

assign tmp_18_fu_1511_p3 = glDVSSlice_V_1_q0[index_assign_18_6_fu_1507_p1];

assign tmp_1_fu_1379_p3 = {{tmp_7_fu_1375_p1}, {3'd0}};

assign tmp_21_fu_1519_p3 = {{tmp_7_fu_1375_p1}, {3'd7}};

assign tmp_22_fu_1531_p3 = glDVSSlice_V_1_q0[index_assign_18_7_fu_1527_p1];

assign tmp_23_fu_1573_p1 = tmpPixVal_V_2_fu_1565_p3[0:0];

always @ (*) begin
    tmp_24_fu_1581_p4 = glDVSSlice_V_1_q0;
    tmp_24_fu_1581_p4[index_assign_s_fu_1387_p1] = |(p_Repl2_8_fu_1577_p1);
end

assign tmp_25_fu_1591_p3 = tmpPixVal_V_2_fu_1565_p3[32'd1];

assign tmp_26_cast_fu_565_p1 = hCntReg_V;

always @ (*) begin
    tmp_26_fu_1603_p4 = tmp_24_fu_1581_p4;
    tmp_26_fu_1603_p4[index_assign_18_1_fu_1407_p1] = |(p_Repl2_8_1_fu_1599_p1);
end

assign tmp_27_fu_1613_p3 = tmpPixVal_V_2_fu_1565_p3[32'd2];

assign tmp_28_cast_fu_546_p1 = tmp_6_fu_540_p2;

always @ (*) begin
    tmp_28_fu_1625_p4 = tmp_26_fu_1603_p4;
    tmp_28_fu_1625_p4[index_assign_18_2_fu_1427_p1] = |(p_Repl2_8_2_fu_1621_p1);
end

assign tmp_29_fu_1635_p3 = tmpPixVal_V_2_fu_1565_p3[32'd3];

assign tmp_2_fu_1399_p3 = {{tmp_7_fu_1375_p1}, {3'd1}};

always @ (*) begin
    tmp_31_fu_1647_p4 = tmp_28_fu_1625_p4;
    tmp_31_fu_1647_p4[index_assign_18_3_fu_1447_p1] = |(p_Repl2_8_3_fu_1643_p1);
end

assign tmp_32_fu_1657_p3 = tmpPixVal_V_2_fu_1565_p3[32'd4];

always @ (*) begin
    tmp_34_fu_1669_p4 = tmp_31_fu_1647_p4;
    tmp_34_fu_1669_p4[index_assign_18_4_fu_1467_p1] = |(p_Repl2_8_4_fu_1665_p1);
end

assign tmp_35_fu_1754_p3 = {{tmp_50_fu_1751_p1}, {3'd0}};

assign tmp_36_fu_1679_p3 = tmpPixVal_V_2_fu_1565_p3[32'd5];

always @ (*) begin
    tmp_37_fu_1691_p4 = tmp_34_fu_1669_p4;
    tmp_37_fu_1691_p4[index_assign_18_5_fu_1487_p1] = |(p_Repl2_8_5_fu_1687_p1);
end

assign tmp_38_fu_1774_p3 = {{tmp_50_fu_1751_p1}, {3'd1}};

assign tmp_39_fu_1794_p3 = {{tmp_50_fu_1751_p1}, {3'd2}};

assign tmp_3_fu_522_p4 = {{ap_phi_mux_p_0583_1_phi_fu_323_p4[10:6]}};

assign tmp_40_fu_1701_p3 = tmpPixVal_V_2_fu_1565_p3[32'd6];

always @ (*) begin
    tmp_41_fu_1713_p4 = tmp_37_fu_1691_p4;
    tmp_41_fu_1713_p4[index_assign_18_6_fu_1507_p1] = |(p_Repl2_8_6_fu_1709_p1);
end

assign tmp_42_fu_1723_p3 = tmpPixVal_V_2_fu_1565_p3[32'd7];

always @ (*) begin
    tmp_43_fu_1735_p4 = tmp_41_fu_1713_p4;
    tmp_43_fu_1735_p4[index_assign_18_7_fu_1527_p1] = |(p_Repl2_8_7_fu_1731_p1);
end

assign tmp_45_fu_1814_p3 = {{tmp_50_fu_1751_p1}, {3'd3}};

assign tmp_46_fu_1834_p3 = {{tmp_50_fu_1751_p1}, {3'd4}};

assign tmp_47_fu_600_p2 = (tmp_11_cast_fu_588_p1 + tmp_89_cast_fu_592_p3);

assign tmp_48_fu_1854_p3 = {{tmp_50_fu_1751_p1}, {3'd5}};

assign tmp_49_fu_1874_p3 = {{tmp_50_fu_1751_p1}, {3'd6}};

assign tmp_4_fu_1419_p3 = {{tmp_7_fu_1375_p1}, {3'd2}};

assign tmp_50_fu_1751_p1 = vCntReg_V_load_reg_2165[5:0];

assign tmp_51_fu_1766_p3 = glDVSSlice_V_0_q0[index_assign_2_fu_1762_p1];

assign tmp_52_fu_1786_p3 = glDVSSlice_V_0_q0[index_assign_22_1_fu_1782_p1];

assign tmp_53_fu_1806_p3 = glDVSSlice_V_0_q0[index_assign_22_2_fu_1802_p1];

assign tmp_54_fu_1826_p3 = glDVSSlice_V_0_q0[index_assign_22_3_fu_1822_p1];

assign tmp_55_fu_1846_p3 = glDVSSlice_V_0_q0[index_assign_22_4_fu_1842_p1];

assign tmp_56_fu_1866_p3 = glDVSSlice_V_0_q0[index_assign_22_5_fu_1862_p1];

assign tmp_57_fu_1886_p3 = glDVSSlice_V_0_q0[index_assign_22_6_fu_1882_p1];

assign tmp_58_fu_1894_p3 = {{tmp_50_fu_1751_p1}, {3'd7}};

assign tmp_59_fu_622_p2 = (vCntReg_V | hCntReg_V);

assign tmp_5_fu_1439_p3 = {{tmp_7_fu_1375_p1}, {3'd3}};

assign tmp_60_fu_628_p2 = ((tmp_59_fu_622_p2 == 12'd0) ? 1'b1 : 1'b0);

assign tmp_61_fu_634_p2 = (12'd1 + hCntReg_V);

assign tmp_62_fu_641_p2 = ((tmp_61_fu_634_p2 == 12'd800) ? 1'b1 : 1'b0);

assign tmp_63_fu_647_p2 = (vCntReg_V + 12'd1);

assign tmp_64_fu_653_p2 = ((tmp_63_fu_647_p2 == 12'd600) ? 1'b1 : 1'b0);

assign tmp_65_fu_1906_p3 = glDVSSlice_V_0_q0[index_assign_22_7_fu_1902_p1];

assign tmp_66_fu_684_p2 = ((r_V_1_fu_680_p1 == 20'd0) ? 1'b1 : 1'b0);

assign tmp_67_fu_2052_p2 = ((startX_V > 16'd299) ? 1'b1 : 1'b0);

assign tmp_68_fu_2058_p2 = (startX_V + 16'd1);

assign tmp_69_fu_2082_p2 = ((startY_V > 16'd199) ? 1'b1 : 1'b0);

assign tmp_6_fu_540_p2 = (tmp_fu_518_p1 + tmp_18_cast_fu_532_p3);

assign tmp_70_fu_2088_p2 = (startY_V + 16'd1);

assign tmp_71_fu_708_p2 = (cntReg_V + 64'd1);

assign tmp_72_fu_2112_p2 = (evCntReg_V + 64'd1);

assign tmp_73_fu_730_p3 = {{tmp_98_fu_726_p1}, {3'd0}};

assign tmp_74_fu_750_p3 = {{tmp_98_fu_726_p1}, {3'd1}};

assign tmp_75_fu_770_p3 = {{tmp_98_fu_726_p1}, {3'd2}};

assign tmp_76_fu_790_p3 = {{tmp_98_fu_726_p1}, {3'd3}};

assign tmp_77_fu_810_p3 = {{tmp_98_fu_726_p1}, {3'd4}};

assign tmp_78_fu_830_p3 = {{tmp_98_fu_726_p1}, {3'd5}};

assign tmp_79_fu_850_p3 = {{tmp_98_fu_726_p1}, {3'd6}};

assign tmp_7_fu_1375_p1 = p_0583_1_reg_319[5:0];

assign tmp_80_fu_870_p3 = {{tmp_98_fu_726_p1}, {3'd7}};

assign tmp_81_fu_1105_p3 = {{tmp_124_fu_1102_p1}, {3'd0}};

assign tmp_82_fu_1125_p3 = {{tmp_124_fu_1102_p1}, {3'd1}};

assign tmp_83_fu_1145_p3 = {{tmp_124_fu_1102_p1}, {3'd2}};

assign tmp_84_fu_1165_p3 = {{tmp_124_fu_1102_p1}, {3'd3}};

assign tmp_85_fu_1185_p3 = {{tmp_124_fu_1102_p1}, {3'd4}};

assign tmp_86_fu_1205_p3 = {{tmp_124_fu_1102_p1}, {3'd5}};

assign tmp_87_fu_1225_p3 = {{tmp_124_fu_1102_p1}, {3'd6}};

assign tmp_88_fu_1245_p3 = {{tmp_124_fu_1102_p1}, {3'd7}};

assign tmp_89_cast_fu_592_p3 = {{grp_fu_471_p4}, {9'd0}};

always @ (*) begin
    tmp_89_fu_1943_p4 = glDVSSlice_V_0_q0;
    tmp_89_fu_1943_p4[index_assign_2_fu_1762_p1] = |(64'd0);
end

assign tmp_8_fu_1391_p3 = glDVSSlice_V_1_q0[index_assign_s_fu_1387_p1];

assign tmp_90_cast_fu_606_p1 = tmp_47_fu_600_p2;

always @ (*) begin
    tmp_90_fu_1953_p4 = tmp_89_fu_1943_p4;
    tmp_90_fu_1953_p4[index_assign_22_1_fu_1782_p1] = |(64'd0);
end

always @ (*) begin
    tmp_91_fu_1963_p4 = tmp_90_fu_1953_p4;
    tmp_91_fu_1963_p4[index_assign_22_2_fu_1802_p1] = |(64'd0);
end

assign tmp_92_cast_fu_569_p3 = {{grp_fu_471_p4}, {9'd0}};

always @ (*) begin
    tmp_92_fu_1973_p4 = tmp_91_fu_1963_p4;
    tmp_92_fu_1973_p4[index_assign_22_3_fu_1822_p1] = |(64'd0);
end

assign tmp_93_cast_fu_583_p1 = tmp_93_fu_577_p2;

assign tmp_93_fu_577_p2 = (tmp_26_cast_fu_565_p1 + tmp_92_cast_fu_569_p3);

always @ (*) begin
    tmp_94_fu_1983_p4 = tmp_92_fu_1973_p4;
    tmp_94_fu_1983_p4[index_assign_22_4_fu_1842_p1] = |(64'd0);
end

always @ (*) begin
    tmp_95_fu_1993_p4 = tmp_94_fu_1983_p4;
    tmp_95_fu_1993_p4[index_assign_22_5_fu_1862_p1] = |(64'd0);
end

always @ (*) begin
    tmp_96_fu_2003_p4 = tmp_95_fu_1993_p4;
    tmp_96_fu_2003_p4[index_assign_22_6_fu_1882_p1] = |(64'd0);
end

always @ (*) begin
    tmp_97_fu_2013_p4 = tmp_96_fu_2003_p4;
    tmp_97_fu_2013_p4[index_assign_22_7_fu_1902_p1] = |(64'd0);
end

assign tmp_98_fu_726_p1 = p_0583_1_reg_319[5:0];

assign tmp_99_fu_742_p3 = glDVSSlice_V_0_q0[index_assign_1_fu_738_p1];

assign tmp_9_fu_1411_p3 = glDVSSlice_V_1_q0[index_assign_18_1_fu_1407_p1];

assign tmp_fu_518_p1 = xStream_V_V_TDATA[13:0];

assign tmp_last_V_fu_616_p2 = ((hCntReg_V == 12'd799) ? 1'b1 : 1'b0);

assign tmp_s_fu_1559_p2 = (8'd1 + p_Result_69_7_fu_1539_p9);

assign tmp_user_V_fu_2040_p3 = ((tmp_60_reg_2204[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign vCnt_V = vCntReg_V_load_3_reg_387_pp0_iter1_reg;

assign vgaEn_V = ap_phi_reg_pp0_iter2_val_assign_reg_458;

assign vgaOutputEn_load_load_fu_611_p1 = vgaOutputEn;

endmodule //eventStreamToConstEncntFrameStream
